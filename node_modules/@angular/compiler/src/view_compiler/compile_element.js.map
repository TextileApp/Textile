{"version":3,"file":"compile_element.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/compile_element.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;OAGI,EAAC,2BAA2B,EAA2B,yBAAyB,EAAE,uBAAuB,EAAwB,oBAAoB,EAAC,MAAM,qBAAqB;OACjL,EAAC,uBAAuB,EAAC,MAAM,kCAAkC;OACjE,EAAC,wBAAwB,EAAE,2BAA2B,EAAC,MAAM,+BAA+B;OAC5F,EAAC,SAAS,EAAC,MAAM,gBAAgB;OACjC,EAAC,WAAW,EAAE,eAAe,EAAE,iBAAiB,EAAE,sBAAsB,EAAC,MAAM,gBAAgB;OAC/F,KAAK,CAAC,MAAM,sBAAsB;OAClC,EAAC,uBAAuB,EAAC,MAAM,sBAAsB;OACrD,EAAC,WAAW,EAAE,eAAe,EAA4B,MAAM,iCAAiC;OAEhG,EAAC,aAAa,EAAC,MAAM,kBAAkB;OACvC,EAAC,YAAY,EAAE,kBAAkB,EAAE,eAAe,EAAC,MAAM,iBAAiB;OAE1E,EAAC,gBAAgB,EAAiB,MAAM,aAAa;OACrD,EAAC,0BAA0B,EAAE,0BAA0B,EAAsB,MAAM,QAAQ;OAC3F,EAAC,iBAAiB,EAAE,4BAA4B,EAAC,MAAM,QAAQ;AAEtE;IACE,qBACW,MAAsB,EAAS,IAAiB,EAAS,SAAiB,EAC1E,UAAwB,EAAS,SAAsB;QADvD,WAAM,GAAN,MAAM,CAAgB;QAAS,SAAI,GAAJ,IAAI,CAAa;QAAS,cAAS,GAAT,SAAS,CAAQ;QAC1E,eAAU,GAAV,UAAU,CAAc;QAAS,cAAS,GAAT,SAAS,CAAa;IAAG,CAAC;IAEtE,4BAAM,GAAN,cAAoB,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAE9C,mCAAa,GAAb,cAA2B,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACpE,kBAAC;AAAD,CAAC,AARD,IAQC;AAED;IAAoC,kCAAW;IAmB7C,wBACI,MAAsB,EAAE,IAAiB,EAAE,SAAiB,EAAE,UAAwB,EACtF,SAAsB,EAAS,SAAkC,EACzD,WAAsC,EACtC,uBAAsC,EAAS,gBAAyB,EACzE,eAAwB,EAAE,UAA0B,EACnD,mBAC4E;QA1B1F,iBA6VC;QAlUG,kBAAM,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;QANrB,cAAS,GAAT,SAAS,CAAyB;QACzD,gBAAW,GAAX,WAAW,CAA2B;QACtC,4BAAuB,GAAvB,uBAAuB,CAAe;QAAS,qBAAgB,GAAhB,gBAAgB,CAAS;QACzE,oBAAe,GAAf,eAAe,CAAS;QACvB,wBAAmB,GAAnB,mBAAmB,CACyD;QArBjF,iBAAY,GAAiB,IAAI,CAAC;QAGlC,cAAS,GAAG,IAAI,GAAG,EAAqB,CAAC;QACzC,6BAAwB,GAAG,IAAI,GAAG,EAAqB,CAAC;QAGvD,gBAAW,GAAG,CAAC,CAAC;QAChB,aAAQ,GAAG,IAAI,GAAG,EAAuB,CAAC;QAE3C,iCAA4B,GAAiC,IAAI,CAAC;QAavE,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,UAAU,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,EAA1C,CAA0C,CAAC,CAAC;QAEtE,IAAI,CAAC,UAAU;YACX,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9F,IAAI,CAAC,SAAS,CAAC,GAAG,CACd,sBAAsB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,SAAS,EACtD,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,IAAI,CAAC,SAAS,CAAC,GAAG,CACd,sBAAsB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC9B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,+BAA+B,EAAE,CAAC;QACzC,CAAC;IACH,CAAC;IA5CM,yBAAU,GAAjB;QACE,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9F,CAAC;IA4CO,6CAAoB,GAA5B;QACE,IAAM,SAAS,GAAG,SAAO,IAAI,CAAC,SAAW,CAAC;QAC1C,IAAM,eAAe,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;QAC5E,uEAAuE;QACvE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAClC,SAAS,EAAE,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,EACrE,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAM,SAAS,GACX,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;aACtB,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC;YAC1E,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU;SACpF,CAAC,CAAC;aACF,MAAM,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,CAAC,GAAG,CACd,sBAAsB,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACrF,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACpD,CAAC;IAEO,wDAA+B,GAAvC;QAAA,iBA0BC;QAzBC,IAAM,eAAe,GACjB,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,UAAC,cAAyC;YAC3E,IAAM,EAAE,GAAG,IAAI,yBAAyB,CAAC,EAAC,IAAI,EAAE,cAAc,CAAC,IAAI,EAAC,CAAC,CAAC;YACtE,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,0BAA0B,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;YAClF,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;QACP,EAAE,CAAC,CAAC,CAAC,eAAe,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC;QACT,CAAC;QACD,IAAM,kCAAkC,GACpC,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,+BAA+B,CAAC,CAAC,CAAC,WAAW,CAAC;YACvF,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC,UAAC,cAAc,IAAK,OAAA,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,EAA5B,CAA4B,CAAC,CAAC;YACnF,4BAA4B,CACxB,IAAI,CAAC,IAAI,EAAE,sBAAsB,CAAC,WAAW,CAAC,wBAAwB,CAAC,EAAE,KAAK,CAAC;SACpF,CAAC,CAAC;QACP,IAAM,QAAQ,GAAG,IAAI,uBAAuB,CAAC;YAC3C,KAAK,EAAE,sBAAsB,CAAC,WAAW,CAAC,wBAAwB,CAAC;YACnE,QAAQ,EAAE,kCAAkC;SAC7C,CAAC,CAAC;QACH,6FAA6F;QAC7F,gFAAgF;QAChF,kBAAkB;QAClB,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,IAAI,WAAW,CAChD,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,eAAe,CAAC,cAAc,EAAE,EAAE,EAC3E,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;IAClC,CAAC;IAED,yCAAgB,GAAhB,UAAiB,YAA0B;QACzC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,4BAA4B;YAC7B,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACjE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,4BAA4B,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAClE,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC5C,CAAC;IACH,CAAC;IAED,wCAAe,GAAf,UAAgB,YAAyB;QACvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAM,qBAAqB,GACvB,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC;gBACpE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,UAAU;aACxD,CAAC,CAAC;YACP,IAAM,QAAQ,GAAG,IAAI,uBAAuB,CAAC;gBAC3C,KAAK,EAAE,sBAAsB,CAAC,WAAW,CAAC,WAAW,CAAC;gBACtD,QAAQ,EAAE,qBAAqB;aAChC,CAAC,CAAC;YACH,gFAAgF;YAChF,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,IAAI,WAAW,CAChD,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,eAAe,CAAC,OAAO,EAAE,EAAE,EACpE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED,uCAAc,GAAd;QAAA,iBAmGC;QAlGC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,SAAS,CAAC,GAAG,CACd,sBAAsB,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAC9D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAoB,CAAC;QACtD,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAChC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,EAA/D,CAA+D,CAAC,CAAC;QAEjF,mEAAmE;QACnE,mFAAmF;QACnF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,gBAAgB;YACpE,IAAM,kBAAkB,GAAG,gBAAgB,CAAC,YAAY,KAAK,eAAe,CAAC,SAAS;gBAClF,gBAAgB,CAAC,YAAY,KAAK,eAAe,CAAC,SAAS,CAAC;YAChE,IAAM,wBAAwB,GAAG,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,QAAQ;gBACvE,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;oBACzB,MAAM,CAAC,KAAI,CAAC,cAAc,CACtB,gBAAgB,CAAC,YAAY,EAC7B,IAAI,2BAA2B,CAAC,EAAC,KAAK,EAAE,QAAQ,CAAC,WAAW,EAAC,CAAC,CAAC,CAAC;gBACtE,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC/B,IAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;oBACzD,IAAM,QAAQ,GACV,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,CAAC,EAAvD,CAAuD,CAAC,CAAC;oBAC/E,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC5D,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC7B,IAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;oBACvD,IAAM,QAAQ,GACV,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,CAAC,EAAvD,CAAuD,CAAC,CAAC;oBAC/E,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACvB,IAAM,0BAA0B,GAAG,IAAI,yBAAyB,CAC5D,EAAC,IAAI,EAAE,wBAAwB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAC,CAAC,CAAC;wBAC7E,KAAI,CAAC,mBAAmB,CAAC,IAAI,CACzB,IAAI,0BAA0B,CAAC,QAAQ,CAAC,QAAQ,EAAE,0BAA0B,CAAC,CAAC,CAAC;wBACnF,MAAM,CAAC,2BAA2B,CAAC,MAAM,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAC;oBAClF,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;6BACjC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC9D,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,uBAAuB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACpD,CAAC;YACH,CAAC,CAAC,CAAC;YACH,IAAM,QAAQ,GAAG,MAAI,gBAAgB,CAAC,KAAK,CAAC,IAAI,SAAI,KAAI,CAAC,SAAS,SAAI,KAAI,CAAC,SAAS,CAAC,IAAM,CAAC;YAC5F,IAAM,QAAQ,GAAG,sBAAsB,CACnC,QAAQ,EAAE,gBAAgB,EAAE,wBAAwB,EAAE,gBAAgB,CAAC,aAAa,EACpF,gBAAgB,CAAC,KAAK,EAAE,KAAI,CAAC,CAAC;YAClC,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACvB,KAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;gBAC9E,KAAI,CAAC,SAAS,CAAC,GAAG,CACd,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,2BAA2B,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YACjE,CAAC;QACH,CAAC,CAAC,CAAC;QAEH;YACE,IAAM,SAAS,GAAG,MAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACtC,IAAM,iBAAiB,GAAG,MAAI,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC;YACxF,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,SAAS,IAAO,KAAI,CAAC,SAAS,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;QAH9F,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE;;SAI/C;QACD,IAAM,gBAAgB,GAAqB,EAAE,CAAC;QAC9C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,gBAAgB;YACpE,IAAM,kBAAkB,GAAG,KAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACvE,gBAAgB,CAAC,IAAI,OAArB,gBAAgB,EACT,kBAAkB,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,IAAI,cAAc,CAAC,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC,EAAjD,CAAiD,CAAC,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO;YAC/C,IAAM,KAAK,GAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAC5C,IAAI,QAAsB,CAAC;YAC3B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,QAAQ,GAAG,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACjD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,GAAG,KAAI,CAAC,UAAU,CAAC;YAC7B,CAAC;YACD,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YACxC,IAAM,QAAQ,GAAG,IAAI,oBAAoB,CAAC,EAAC,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;YAC5D,gBAAgB,CAAC,IAAI,OAArB,gBAAgB,EACT,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,IAAI,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAnC,CAAmC,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QACH,gBAAgB,CAAC,OAAO,CAAC,UAAC,aAAa;YACrC,IAAI,KAAmB,CAAC;YACxB,EAAE,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC7C,0BAA0B;gBAC1B,KAAK,GAAG,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC3D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,wBAAwB;gBACxB,IAAM,KAAK,GAAG,KAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7D,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACrB,KAAK,GAAG,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAC9C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC;gBAC1B,CAAC;YACH,CAAC;YACD,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;YACjD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sCAAa,GAAb,UAAc,cAAsB;QAApC,iBAqBC;QApBC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,gBAAgB;YACpE,+DAA+D;YAC/D,8FAA8F;YAC9F,iBAAiB;YACjB,IAAM,YAAY,GAAG,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC1E,yEAAyE;YACzE,gFAAgF;YAChF,gFAAgF;YAChF,8EAA8E;YAC9E,IAAM,sBAAsB,GACxB,gBAAgB,CAAC,YAAY,KAAK,eAAe,CAAC,cAAc,GAAG,CAAC,GAAG,cAAc,CAAC;YAC1F,KAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,6BAA6B,CAC7D,KAAI,CAAC,SAAS,EAAE,sBAAsB,EAAE,gBAAgB,EAAE,YAAY,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;aAC7B,OAAO,CACJ,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,OAAO,CACtB,UAAA,CAAC;YACG,OAAA,CAAC,CAAC,aAAa,CAAC,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE,KAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC;QAA7E,CAA6E,CAAC,EAF3E,CAE2E,CAAC,CAAC;IAClG,CAAC;IAED,uCAAc,GAAd,UAAe,cAAsB,EAAE,QAA6B;QAClE,IAAI,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAC;IAED,qCAAY,GAAZ;QACE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;YAC5B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC;YAClE,IAAI,CAAC;IACX,CAAC;IAED,0CAAiB,GAAjB;QACE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;aAC9C,GAAG,CAAC,UAAC,gBAAgB,IAAK,OAAA,uBAAuB,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAA/C,CAA+C,CAAC,CAAC;IAClF,CAAC;IAEO,uCAAc,GAAtB,UAAuB,KAA2B;QAChD,IAAM,MAAM,GAAmB,EAAE,CAAC;QAClC,IAAI,SAAS,GAAmB,IAAI,CAAC;QACrC,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,OAAuB,CAAC;QAC5B,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;YAC3B,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAClD,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,OAAO,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,WAAW,IAAI,QAAQ,IAAI,CAAC,EAAvC,CAAuC,CAAC,CAAC,CAAC;YACrF,CAAC;YACD,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrC,QAAQ,EAAE,CAAC;YACb,CAAC;YACD,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC;QAC/B,CAAC;QACD,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACnE,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,OAAO,CAAC,CAAC;QAC1B,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAEO,kCAAS,GAAjB,UAAkB,SAA+B,EAAE,iBAA+B;QAEhF,IAAM,QAAQ,GACV,YAAU,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,SAAI,IAAI,CAAC,SAAS,SAAI,IAAI,CAAC,WAAW,EAAI,CAAC;QACpF,IAAM,SAAS,GAAG,eAAe,CAAC,SAAS,EAAE,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACrF,IAAM,KAAK,GAAG,IAAI,YAAY,CAAC,SAAS,EAAE,SAAS,EAAE,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACnF,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEO,4CAAmB,GAA3B,UACI,sBAAuC,EAAE,GAAgC;QAC3E,IAAI,MAAM,GAAiB,IAAI,CAAC;QAChC,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,0CAA0C;YAC1C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS;oBACnB,sBAAsB,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpE,EAAE,CAAC,CAAC,sBAAsB,KAAK,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;wBACzD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACvC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBACxF,CAAC;gBACH,CAAC;YACH,CAAC;YACD,0CAA0C;YAC1C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,IAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAC1E,uEAAuE;gBACvE,oEAAoE;gBACpE,EAAE,CAAC,CAAC,gBAAgB,IAAI,CAAC,sBAAsB,KAAK,eAAe,CAAC,SAAS;oBACpD,sBAAsB,KAAK,eAAe,CAAC,aAAa,CAAC;oBAC9E,gBAAgB,CAAC,YAAY,KAAK,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC;oBACrE,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC;gBACD,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACnD,CAAC;QACH,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAEO,uCAAc,GAAtB,UAAuB,sBAAuC,EAAE,GAAgC;QAE9F,IAAI,WAAW,GAAmB,IAAI,CAAC;QACvC,IAAI,MAAM,GAAiB,IAAI,CAAC;QAChC,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YAChB,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAC/B,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;QACjE,CAAC;QACD,wBAAwB;QACxB,OAAO,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC;YAC/C,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC;YACjC,MAAM,GAAG,WAAW,CAAC,mBAAmB,CACpC,eAAe,CAAC,aAAa,EAAE,IAAI,2BAA2B,CAAC,EAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;QAC1F,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,GAAG,4BAA4B,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;QAC9E,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,GAAG,CAAC,CAAC,SAAS,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;IAChE,CAAC;IACH,qBAAC;AAAD,CAAC,AA7VD,CAAoC,WAAW,GA6V9C;AAED,uCACI,SAAiB,EAAE,cAAsB,EAAE,QAAqB,EAChE,YAA0B;IAC5B,IAAI,cAA4B,CAAC;IACjC,EAAE,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC;aACf,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC;aAC9C,GAAG,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,WAAW,CAC9C,CAAC,CAAC,OAAO,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;IACrF,CAAC;IACD,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CACf,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,uBAAuB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,EAC7F,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC;AAED,gCACI,QAAgB,EAAE,QAAqB,EAAE,wBAAwC,EACjF,OAAgB,EAAE,OAAgB,EAAE,cAA8B;IACpE,IAAM,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;IACjC,IAAI,yBAAuC,CAAC;IAC5C,IAAI,IAAY,CAAC;IACjB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,yBAAyB,GAAG,CAAC,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC;QACnE,IAAI,GAAG,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;IACzC,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,yBAAyB,GAAG,wBAAwB,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,GAAG,wBAAwB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1C,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACV,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC;IACxB,CAAC;IACD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IAChG,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,IAAM,aAAa,GAAG,MAAI,QAAU,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;QACxD,IAAM,MAAM,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;QAC1E,8EAA8E;QAC9E,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CACvB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,EACzC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAChF,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;IACxE,CAAC;IACD,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC;AAED;IAEE,wBAAmB,KAAmB,EAAE,KAA2B;QAAhD,UAAK,GAAL,KAAK,CAAc;QACpC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;IACvC,CAAC;IACH,qBAAC;AAAD,CAAC,AALD,IAKC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveSummary, CompileIdentifierMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {createDiTokenExpression} from '../compiler_util/identifier_util';\nimport {DirectiveWrapperCompiler, DirectiveWrapperExpressions} from '../directive_wrapper_compiler';\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, identifierToken, resolveIdentifier, resolveIdentifierToken} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {convertValueToOutputAst} from '../output/value_util';\nimport {ProviderAst, ProviderAstType, ReferenceAst, TemplateAst} from '../template_parser/template_ast';\n\nimport {CompileMethod} from './compile_method';\nimport {CompileQuery, addQueryToTokenMap, createQueryList} from './compile_query';\nimport {CompileView, CompileViewRootNode} from './compile_view';\nimport {InjectMethodVars, ViewProperties} from './constants';\nimport {ComponentFactoryDependency, DirectiveWrapperDependency, ViewClassDependency} from './deps';\nimport {getPropertyInView, injectFromViewParentInjector} from './util';\n\nexport class CompileNode {\n  constructor(\n      public parent: CompileElement, public view: CompileView, public nodeIndex: number,\n      public renderNode: o.Expression, public sourceAst: TemplateAst) {}\n\n  isNull(): boolean { return !this.renderNode; }\n\n  isRootElement(): boolean { return this.view != this.parent.view; }\n}\n\nexport class CompileElement extends CompileNode {\n  static createNull(): CompileElement {\n    return new CompileElement(null, null, null, null, null, null, [], [], false, false, [], []);\n  }\n\n  public compViewExpr: o.Expression = null;\n  public viewContainer: o.ReadPropExpr;\n  public elementRef: o.Expression;\n  public instances = new Map<any, o.Expression>();\n  public directiveWrapperInstance = new Map<any, o.Expression>();\n  private _resolvedProviders: Map<any, ProviderAst>;\n\n  private _queryCount = 0;\n  private _queries = new Map<any, CompileQuery[]>();\n\n  public contentNodesByNgContentIndex: Array<CompileViewRootNode>[] = null;\n  public embeddedView: CompileView;\n  public referenceTokens: {[key: string]: CompileTokenMetadata};\n\n  constructor(\n      parent: CompileElement, view: CompileView, nodeIndex: number, renderNode: o.Expression,\n      sourceAst: TemplateAst, public component: CompileDirectiveSummary,\n      private _directives: CompileDirectiveSummary[],\n      private _resolvedProvidersArray: ProviderAst[], public hasViewContainer: boolean,\n      public hasEmbeddedView: boolean, references: ReferenceAst[],\n      private _targetDependencies:\n          Array<ViewClassDependency|ComponentFactoryDependency|DirectiveWrapperDependency>) {\n    super(parent, view, nodeIndex, renderNode, sourceAst);\n    this.referenceTokens = {};\n    references.forEach(ref => this.referenceTokens[ref.name] = ref.value);\n\n    this.elementRef =\n        o.importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);\n    this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);\n    this.instances.set(\n        resolveIdentifierToken(Identifiers.Injector).reference,\n        o.THIS_EXPR.callMethod('injector', [o.literal(this.nodeIndex)]));\n    this.instances.set(\n        resolveIdentifierToken(Identifiers.Renderer).reference, o.THIS_EXPR.prop('renderer'));\n    if (this.hasViewContainer || this.hasEmbeddedView) {\n      this._createViewContainer();\n    }\n    if (this.component) {\n      this._createComponentFactoryResolver();\n    }\n  }\n\n  private _createViewContainer() {\n    const fieldName = `_vc_${this.nodeIndex}`;\n    const parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;\n    // private is fine here as no child view will reference a ViewContainer\n    this.view.fields.push(new o.ClassField(\n        fieldName, o.importType(resolveIdentifier(Identifiers.ViewContainer)),\n        [o.StmtModifier.Private]));\n    const statement =\n        o.THIS_EXPR.prop(fieldName)\n            .set(o.importExpr(resolveIdentifier(Identifiers.ViewContainer)).instantiate([\n              o.literal(this.nodeIndex), o.literal(parentNodeIndex), o.THIS_EXPR, this.renderNode\n            ]))\n            .toStmt();\n    this.view.createMethod.addStmt(statement);\n    this.viewContainer = o.THIS_EXPR.prop(fieldName);\n    this.instances.set(\n        resolveIdentifierToken(Identifiers.ViewContainer).reference, this.viewContainer);\n    this.view.viewContainers.push(this.viewContainer);\n  }\n\n  private _createComponentFactoryResolver() {\n    const entryComponents =\n        this.component.entryComponents.map((entryComponent: CompileIdentifierMetadata) => {\n          const id = new CompileIdentifierMetadata({name: entryComponent.name});\n          this._targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));\n          return id;\n        });\n    if (!entryComponents || entryComponents.length === 0) {\n      return;\n    }\n    const createComponentFactoryResolverExpr =\n        o.importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([\n          o.literalArr(entryComponents.map((entryComponent) => o.importExpr(entryComponent))),\n          injectFromViewParentInjector(\n              this.view, resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)\n        ]);\n    const provider = new CompileProviderMetadata({\n      token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),\n      useValue: createComponentFactoryResolverExpr\n    });\n    // Add ComponentFactoryResolver as first provider as it does not have deps on other providers\n    // ProviderAstType.PrivateService as only the component and its view can see it,\n    // but nobody else\n    this._resolvedProvidersArray.unshift(new ProviderAst(\n        provider.token, false, true, [provider], ProviderAstType.PrivateService, [],\n        this.sourceAst.sourceSpan));\n  }\n\n  setComponentView(compViewExpr: o.Expression) {\n    this.compViewExpr = compViewExpr;\n    this.contentNodesByNgContentIndex =\n        new Array(this.component.template.ngContentSelectors.length);\n    for (let i = 0; i < this.contentNodesByNgContentIndex.length; i++) {\n      this.contentNodesByNgContentIndex[i] = [];\n    }\n  }\n\n  setEmbeddedView(embeddedView: CompileView) {\n    this.embeddedView = embeddedView;\n    if (isPresent(embeddedView)) {\n      const createTemplateRefExpr =\n          o.importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([\n            o.THIS_EXPR, o.literal(this.nodeIndex), this.renderNode\n          ]);\n      const provider = new CompileProviderMetadata({\n        token: resolveIdentifierToken(Identifiers.TemplateRef),\n        useValue: createTemplateRefExpr\n      });\n      // Add TemplateRef as first provider as it does not have deps on other providers\n      this._resolvedProvidersArray.unshift(new ProviderAst(\n          provider.token, false, true, [provider], ProviderAstType.Builtin, [],\n          this.sourceAst.sourceSpan));\n    }\n  }\n\n  beforeChildren(): void {\n    if (this.hasViewContainer) {\n      this.instances.set(\n          resolveIdentifierToken(Identifiers.ViewContainerRef).reference,\n          this.viewContainer.prop('vcRef'));\n    }\n\n    this._resolvedProviders = new Map<any, ProviderAst>();\n    this._resolvedProvidersArray.forEach(\n        provider => this._resolvedProviders.set(provider.token.reference, provider));\n\n    // create all the provider instances, some in the view constructor,\n    // some as getters. We rely on the fact that they are already sorted topologically.\n    Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {\n      const isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component ||\n          resolvedProvider.providerType === ProviderAstType.Directive;\n      const providerValueExpressions = resolvedProvider.providers.map((provider) => {\n        if (provider.useExisting) {\n          return this._getDependency(\n              resolvedProvider.providerType,\n              new CompileDiDependencyMetadata({token: provider.useExisting}));\n        } else if (provider.useFactory) {\n          const deps = provider.deps || provider.useFactory.diDeps;\n          const depsExpr =\n              deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          return o.importExpr(provider.useFactory).callFn(depsExpr);\n        } else if (provider.useClass) {\n          const deps = provider.deps || provider.useClass.diDeps;\n          const depsExpr =\n              deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          if (isDirectiveWrapper) {\n            const directiveWrapperIdentifier = new CompileIdentifierMetadata(\n                {name: DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass)});\n            this._targetDependencies.push(\n                new DirectiveWrapperDependency(provider.useClass, directiveWrapperIdentifier));\n            return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);\n          } else {\n            return o.importExpr(provider.useClass)\n                .instantiate(depsExpr, o.importType(provider.useClass));\n          }\n        } else {\n          return convertValueToOutputAst(provider.useValue);\n        }\n      });\n      const propName = `_${resolvedProvider.token.name}_${this.nodeIndex}_${this.instances.size}`;\n      const instance = createProviderProperty(\n          propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider,\n          resolvedProvider.eager, this);\n      if (isDirectiveWrapper) {\n        this.directiveWrapperInstance.set(resolvedProvider.token.reference, instance);\n        this.instances.set(\n            resolvedProvider.token.reference, DirectiveWrapperExpressions.context(instance));\n      } else {\n        this.instances.set(resolvedProvider.token.reference, instance);\n      }\n    });\n\n    for (let i = 0; i < this._directives.length; i++) {\n      const directive = this._directives[i];\n      const directiveInstance = this.instances.get(identifierToken(directive.type).reference);\n      directive.queries.forEach((queryMeta) => { this._addQuery(queryMeta, directiveInstance); });\n    }\n    const queriesWithReads: _QueryWithRead[] = [];\n    Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {\n      const queriesForProvider = this._getQueriesFor(resolvedProvider.token);\n      queriesWithReads.push(\n          ...queriesForProvider.map(query => new _QueryWithRead(query, resolvedProvider.token)));\n    });\n    Object.keys(this.referenceTokens).forEach(varName => {\n      const token = this.referenceTokens[varName];\n      let varValue: o.Expression;\n      if (token) {\n        varValue = this.instances.get(token.reference);\n      } else {\n        varValue = this.renderNode;\n      }\n      this.view.locals.set(varName, varValue);\n      const varToken = new CompileTokenMetadata({value: varName});\n      queriesWithReads.push(\n          ...this._getQueriesFor(varToken).map(query => new _QueryWithRead(query, varToken)));\n    });\n    queriesWithReads.forEach((queryWithRead) => {\n      let value: o.Expression;\n      if (isPresent(queryWithRead.read.identifier)) {\n        // query for an identifier\n        value = this.instances.get(queryWithRead.read.reference);\n      } else {\n        // query for a reference\n        const token = this.referenceTokens[queryWithRead.read.value];\n        if (isPresent(token)) {\n          value = this.instances.get(token.reference);\n        } else {\n          value = this.elementRef;\n        }\n      }\n      if (isPresent(value)) {\n        queryWithRead.query.addValue(value, this.view);\n      }\n    });\n  }\n\n  afterChildren(childNodeCount: number) {\n    Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {\n      // Note: afterChildren is called after recursing into children.\n      // This is good so that an injector match in an element that is closer to a requesting element\n      // matches first.\n      const providerExpr = this.instances.get(resolvedProvider.token.reference);\n      // Note: view providers are only visible on the injector of that element.\n      // This is not fully correct as the rules during codegen don't allow a directive\n      // to get hold of a view provdier on the same element. We still do this semantic\n      // as it simplifies our model to having only one runtime injector per element.\n      const providerChildNodeCount =\n          resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;\n      this.view.injectorGetMethod.addStmt(createInjectInternalCondition(\n          this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));\n    });\n\n    Array.from(this._queries.values())\n        .forEach(\n            queries => queries.forEach(\n                q =>\n                    q.afterChildren(this.view.createMethod, this.view.updateContentQueriesMethod)));\n  }\n\n  addContentNode(ngContentIndex: number, nodeExpr: CompileViewRootNode) {\n    this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);\n  }\n\n  getComponent(): o.Expression {\n    return isPresent(this.component) ?\n        this.instances.get(identifierToken(this.component.type).reference) :\n        null;\n  }\n\n  getProviderTokens(): o.Expression[] {\n    return Array.from(this._resolvedProviders.values())\n        .map((resolvedProvider) => createDiTokenExpression(resolvedProvider.token));\n  }\n\n  private _getQueriesFor(token: CompileTokenMetadata): CompileQuery[] {\n    const result: CompileQuery[] = [];\n    let currentEl: CompileElement = this;\n    let distance = 0;\n    let queries: CompileQuery[];\n    while (!currentEl.isNull()) {\n      queries = currentEl._queries.get(token.reference);\n      if (isPresent(queries)) {\n        result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));\n      }\n      if (currentEl._directives.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl.parent;\n    }\n    queries = this.view.componentView.viewQueries.get(token.reference);\n    if (isPresent(queries)) {\n      result.push(...queries);\n    }\n    return result;\n  }\n\n  private _addQuery(queryMeta: CompileQueryMetadata, directiveInstance: o.Expression):\n      CompileQuery {\n    const propName =\n        `_query_${queryMeta.selectors[0].name}_${this.nodeIndex}_${this._queryCount++}`;\n    const queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);\n    const query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);\n    addQueryToTokenMap(this._queries, query);\n    return query;\n  }\n\n  private _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata): o.Expression {\n    let result: o.Expression = null;\n    if (isPresent(dep.token)) {\n      // access builtins with special visibility\n      if (!result) {\n        if (dep.token.reference ===\n            resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {\n          if (requestingProviderType === ProviderAstType.Component) {\n            return this.compViewExpr.prop('ref');\n          } else {\n            return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n          }\n        }\n      }\n      // access regular providers on the element\n      if (!result) {\n        const resolvedProvider = this._resolvedProviders.get(dep.token.reference);\n        // don't allow directives / public services to access private services.\n        // only components and private services can access private services.\n        if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive ||\n                                 requestingProviderType === ProviderAstType.PublicService) &&\n            resolvedProvider.providerType === ProviderAstType.PrivateService) {\n          return null;\n        }\n        result = this.instances.get(dep.token.reference);\n      }\n    }\n    return result;\n  }\n\n  private _getDependency(requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata):\n      o.Expression {\n    let currElement: CompileElement = this;\n    let result: o.Expression = null;\n    if (dep.isValue) {\n      result = o.literal(dep.value);\n    }\n    if (!result && !dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep);\n    }\n    // check parent elements\n    while (!result && !currElement.parent.isNull()) {\n      currElement = currElement.parent;\n      result = currElement._getLocalDependency(\n          ProviderAstType.PublicService, new CompileDiDependencyMetadata({token: dep.token}));\n    }\n\n    if (!result) {\n      result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);\n    }\n    if (!result) {\n      result = o.NULL_EXPR;\n    }\n    return getPropertyInView(result, this.view, currElement.view);\n  }\n}\n\nfunction createInjectInternalCondition(\n    nodeIndex: number, childNodeCount: number, provider: ProviderAst,\n    providerExpr: o.Expression): o.Statement {\n  let indexCondition: o.Expression;\n  if (childNodeCount > 0) {\n    indexCondition = o.literal(nodeIndex)\n                         .lowerEquals(InjectMethodVars.requestNodeIndex)\n                         .and(InjectMethodVars.requestNodeIndex.lowerEquals(\n                             o.literal(nodeIndex + childNodeCount)));\n  } else {\n    indexCondition = o.literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);\n  }\n  return new o.IfStmt(\n      InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition),\n      [new o.ReturnStatement(providerExpr)]);\n}\n\nfunction createProviderProperty(\n    propName: string, provider: ProviderAst, providerValueExpressions: o.Expression[],\n    isMulti: boolean, isEager: boolean, compileElement: CompileElement): o.Expression {\n  const view = compileElement.view;\n  let resolvedProviderValueExpr: o.Expression;\n  let type: o.Type;\n  if (isMulti) {\n    resolvedProviderValueExpr = o.literalArr(providerValueExpressions);\n    type = new o.ArrayType(o.DYNAMIC_TYPE);\n  } else {\n    resolvedProviderValueExpr = providerValueExpressions[0];\n    type = providerValueExpressions[0].type;\n  }\n  if (!type) {\n    type = o.DYNAMIC_TYPE;\n  }\n  if (isEager) {\n    view.fields.push(new o.ClassField(propName, type));\n    view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n  } else {\n    const internalField = `_${propName}`;\n    view.fields.push(new o.ClassField(internalField, type));\n    const getter = new CompileMethod(view);\n    getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n    // Note: Equals is important for JS so that it also checks the undefined case!\n    getter.addStmt(new o.IfStmt(\n        o.THIS_EXPR.prop(internalField).isBlank(),\n        [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));\n    getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));\n    view.getters.push(new o.ClassGetter(propName, getter.finish(), type));\n  }\n  return o.THIS_EXPR.prop(propName);\n}\n\nclass _QueryWithRead {\n  public read: CompileTokenMetadata;\n  constructor(public query: CompileQuery, match: CompileTokenMetadata) {\n    this.read = query.meta.read || match;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}