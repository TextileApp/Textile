{"version":3,"sources":["../../../src/@ionic-native/plugins/push/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, CordovaInstance, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare var window: any;\n\nexport type EventResponse = RegistrationEventResponse & NotificationEventResponse & Error;\n\nexport interface RegistrationEventResponse {\n  /**\n   * The registration ID provided by the 3rd party remote push service.\n   */\n  registrationId: string;\n}\n\n\nexport interface NotificationEventResponse {\n  /**\n   * The text of the push message sent from the 3rd party service.\n   */\n  message: string;\n  /**\n   * The optional title of the push message sent from the 3rd party service.\n   */\n  title?: string;\n  /**\n   * The number of messages to be displayed in the badge iOS or message count in the notification shade in Android.\n   * For windows, it represents the value in the badge notification which could be a number or a status glyph.\n   */\n  count: string;\n  /**\n   * The name of the sound file to be played upon receipt of the notification.\n   */\n  sound: string;\n  /**\n   * The path of the image file to be displayed in the notification.\n   */\n  image: string;\n  /**\n   * An optional collection of data sent by the 3rd party push service that does not fit in the above properties.\n   */\n  additionalData: NotificationEventAdditionalData & any;\n}\n\n/**\n * Loosened up with a dictionary notation, but all non-defined properties need to use (map['prop']) notation\n *\n * Ideally the developer would overload (merged declaration) this or create a new interface that would extend this one\n * so that he could specify any custom code without having to use array notation (map['prop']) for all of them.\n */\nexport interface NotificationEventAdditionalData {\n  [name: string]: any;\n\n  /**\n   * Whether the notification was received while the app was in the foreground\n   */\n  foreground?: boolean;\n  collapse_key?: string;\n  coldstart?: boolean;\n  from?: string;\n  notId?: string;\n}\n\nexport interface IOSPushOptions {\n  /**\n   * Maps to the project number in the Google Developer Console. Setting this\n   * uses GCM for notifications instead of native.\n   */\n  senderID?: string;\n\n  /**\n   * Whether to use prod or sandbox GCM setting.\n   */\n  gcmSandbox?: boolean | string;\n\n  /**\n   * If true the device shows an alert on receipt of notification.\n   * **Note**: the value you set this option to the first time you call the init\n   * method will be how the application always acts. Once this is set\n   * programmatically in the init method it can only be changed manually by the\n   * user in Settings>Notifications>App Name. This is normal iOS behaviour.\n   */\n  alert?: boolean | string;\n\n  /**\n   * If true the device sets the badge number on receipt of notification.\n   * **Note**: the value you set this option to the first time you call the init\n   * method will be how the application always acts. Once this is set\n   * programmatically in the init method it can only be changed manually by the\n   * user in Settings>Notifications>App Name. This is normal iOS behaviour.\n   */\n  badge?: boolean | string;\n\n  /**\n   * If true the device plays a sound on receipt of notification.\n   * **Note**: the value you set this option to the first time you call the init\n   * method will be how the application always acts. Once this is set\n   * programmatically in the init method it can only be changed manually by the\n   * user in Settings>Notifications>App Name. This is normal iOS behaviour.\n   */\n  sound?: boolean | string;\n\n  /**\n   * If true the badge will be cleared on app startup.\n   */\n  clearBadge?: boolean | string;\n\n  /**\n   * If the array contains one or more strings each string will be used to\n   * subscribe to a GcmPubSub topic.\n   * **Note**: only usable in conjunction with `senderID`.\n   */\n  topics?: string[];\n\n  /**\n   * The data required in order to enable Action Buttons for iOS.\n   * Action Buttons on iOS - https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/PAYLOAD.md#action-buttons-1\n   */\n  categories?: CategoryArray;\n}\n\nexport interface CategoryArray {\n  [name: string]: CategoryAction;\n}\n\nexport interface CategoryAction {\n  yes?: CategoryActionData;\n  no?: CategoryActionData;\n  maybe?: CategoryActionData;\n}\n\nexport interface CategoryActionData {\n  callback: string;\n  title: string;\n  foreground: boolean;\n  destructive: boolean;\n}\n\nexport interface AndroidPushOptions {\n  /**\n   * Maps to the project number in the Google Developer Console.\n   */\n  senderID: string;\n\n  /**\n   * The name of a drawable resource to use as the small-icon. The name should\n   * not include the extension.\n   */\n  icon?: string;\n\n  /**\n   * Sets the background color of the small icon on Android 5.0 and greater.\n   * [Supported Formats](http://developer.android.com/intl/ru/reference/android/graphics/Color.html#parseColor(java.lang.String))\n   */\n  iconColor?: string;\n\n  /**\n   * If true it plays the sound specified in the push data or the default system\n   * sound.\n   */\n  sound?: boolean | string;\n\n  /**\n   * If true the device vibrates on receipt of notification.\n   */\n  vibrate?: boolean | string;\n\n  /**\n   * If true the icon badge will be cleared on init and before push messages are processed.\n   */\n  clearBadge?: boolean | string;\n\n  /**\n   * If true the app clears all pending notifications when it is closed.\n   */\n  clearNotifications?: boolean | string;\n\n  /**\n   * If true will always show a notification, even when the app is on the\n   * foreground.\n   */\n  forceShow?: boolean | string;\n\n  /**\n   * If the array contains one or more strings each string will be used to\n   * subscribe to a GcmPubSub topic.\n   */\n  topics?: string[];\n}\n\nexport interface PushOptions {\n  ios?: IOSPushOptions;\n  android?: AndroidPushOptions;\n  windows?: any;\n}\n\nexport type PushEvent = 'registration' | 'error' | 'notification';\n\n/**\n * @name Push\n * @description\n * Register and receive push notifications.\n *\n * Requires Cordova plugin: `phonegap-plugin-push`. For more info, please see the [Push plugin docs](https://github.com/phonegap/phonegap-plugin-push).\n *\n * For TypeScript users, see the [Push plugin docs about using TypeScript for custom notifications](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md).\n *\n * @usage\n * ```typescript\n * import { Push, PushObject, PushOptions } from '@ionic-native/push';\n *\n * constructor(private push: Push) { }\n *\n * ...\n *\n *\n * // to check if we have permission\n * this.push.hasPermission()\n *   .then((res: any) => {\n *\n *     if (res.isEnabled) {\n *       console.log('We have permission to send push notifications');\n *     } else {\n *       console.log('We do not have permission to send push notifications');\n *     }\n *\n *   });\n *\n * // to initialize push notifications\n *\n * const options: PushOptions = {\n *    android: {\n *        senderID: '12345679'\n *    },\n *    ios: {\n *        alert: 'true',\n *        badge: true,\n *        sound: 'false'\n *    },\n *    windows: {}\n * };\n *\n * const pushObject: PushObject = this.push.init(options);\n *\n * pushObject.on('notification').subscribe((notification: any) => console.log('Received a notification', notification));\n *\n * pushObject.on('registration').subscribe((registration: any) => console.log('Device registered', registration));\n *\n * pushObject.on('error').subscribe(error => console.error('Error with Push plugin', error));\n *\n *\n * ```\n *\n * @interfaces\n * RegistrationEventResponse\n * NotificationEventResponse\n * NotificationEventAdditionalData\n * IOSPushOptions\n * AndroidPushOptions\n * PushOptions\n */\n@Plugin({\n  pluginName: 'Push',\n  plugin: 'phonegap-plugin-push',\n  pluginRef: 'PushNotification',\n  repo: 'https://github.com/phonegap/phonegap-plugin-push',\n  install: 'ionic cordova plugin add phonegap-plugin-push --variable SENDER_ID=XXXXXXXXX',\n  installVariables: ['SENDER_ID'],\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class Push extends IonicNativePlugin {\n\n  /**\n   * Init push notifications\n   * @param options {PushOptions}\n   * @return {PushObject}\n   */\n  init(options: PushOptions): PushObject {\n    return new PushObject(options);\n  }\n\n  /**\n   * Check whether the push notification permission has been granted.\n   * @return {Promise<{isEnabled: boolean}>} Returns a Promise that resolves with an object with one property: isEnabled, a boolean that indicates if permission has been granted.\n   */\n  @Cordova()\n  hasPermission(): Promise<{ isEnabled: boolean }> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n/**\n * @hidden\n */\n@Plugin({\n  pluginName: 'Push',\n  plugin: 'phonegap-plugin-push',\n  pluginRef: 'PushNotification'\n})\nexport class PushObject {\n\n  private _objectInstance: any;\n\n  constructor(options: PushOptions) {\n    if (checkAvailability('PushNotification', 'init', 'PushNotification') === true) {\n      this._objectInstance = window.PushNotification.init(options);\n    }\n  }\n\n  /**\n   * Adds an event listener\n   * @param event {string}\n   * @return {Observable<EventResponse>}\n   */\n  @CordovaInstance({\n    observable: true,\n    clearFunction: 'off',\n    clearWithArgs: true\n  })\n  on(event: PushEvent): Observable<EventResponse> { return; }\n\n  /**\n   * The unregister method is used when the application no longer wants to receive push notifications.\n   * Beware that this cleans up all event handlers previously registered,\n   * so you will need to re-register them if you want them to function again without an application reload.\n   */\n  @CordovaInstance()\n  unregister(): Promise<any> { return; }\n\n  /**\n   * Set the badge count visible when the app is not running\n   *\n   * The count is an integer indicating what number should show up in the badge.\n   * Passing 0 will clear the badge.\n   * Each notification event contains a data.count value which can be used to set the badge to correct number.\n   * @param count\n   */\n  @CordovaInstance({\n    callbackOrder: 'reverse'\n  })\n  setApplicationIconBadgeNumber(count?: number): Promise<any> { return; };\n  /**\n   * Get the current badge count visible when the app is not running\n   * successHandler gets called with an integer which is the current badge count\n   */\n  @CordovaInstance()\n  getApplicationIconBadgeNumber(): Promise<number> { return; }\n\n  /**\n   * iOS only\n   * Tells the OS that you are done processing a background push notification.\n   * successHandler gets called when background push processing is successfully completed.\n   */\n  @CordovaInstance()\n  finish(): Promise<any> { return; }\n\n  /**\n   * Tells the OS to clear all notifications from the Notification Center\n   */\n  @CordovaInstance()\n  clearAllNotifications(): Promise<any> { return; }\n\n  /**\n   * The subscribe method is used when the application wants to subscribe a new topic to receive push notifications.\n   * @param topic {string} Topic to subscribe to.\n   * @return {Promise<any>}\n   */\n  @CordovaInstance()\n  subscribe(topic: string): Promise<any> { return; }\n\n  /**\n   * The unsubscribe method is used when the application no longer wants to receive push notifications from a specific topic but continue to receive other push messages.\n   * @param topic {string} Topic to unsubscribe from.\n   * @return {Promise<any>}\n   */\n  @CordovaInstance()\n  unsubscribe(topic: string): Promise<any> { return; }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}