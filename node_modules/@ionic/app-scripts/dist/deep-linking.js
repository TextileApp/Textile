"use strict";
var logger_1 = require('./logger/logger');
var Constants = require('./util/constants');
var errors_1 = require('./util/errors');
var helpers_1 = require('./util/helpers');
var util_1 = require('./deep-linking/util');
function deepLinking(context) {
    var logger = new logger_1.Logger("deep links");
    return deepLinkingWorker(context).then(function (hydratedDeepLinkEntryList) {
        helpers_1.setParsedDeepLinkConfig(hydratedDeepLinkEntryList);
        logger.finish();
    })
        .catch(function (err) {
        var error = new errors_1.BuildError(err.message);
        error.isFatal = true;
        throw logger.fail(error);
    });
}
exports.deepLinking = deepLinking;
function deepLinkingWorker(context) {
    var appModulePath = process.env[Constants.ENV_APP_NG_MODULE_PATH];
    return getAppNgModuleContent(appModulePath, context.fileCache).then(function (fileContent) {
        return extractDeepLinkData(appModulePath, fileContent, context.runAot);
    });
}
function getAppNgModuleContent(filePath, fileCache) {
    var file = fileCache.get(filePath);
    if (file) {
        return Promise.resolve(file.content);
    }
    return helpers_1.readFileAsync(filePath).then(function (fileContent) {
        // cache it!
        fileCache.set(filePath, { path: filePath, content: fileContent });
        return fileContent;
    });
}
function deepLinkingUpdate(changedFiles, context) {
    var appNgModuleChangedFiles = changedFiles.filter(function (changedFile) { return changedFile.filePath === process.env[Constants.ENV_APP_NG_MODULE_PATH]; });
    if (appNgModuleChangedFiles.length) {
        var fileContent = context.fileCache.get(appNgModuleChangedFiles[0].filePath).content;
        var hydratedDeepLinkEntries = extractDeepLinkData(appNgModuleChangedFiles[0].filePath, fileContent, context.runAot);
        helpers_1.setParsedDeepLinkConfig(hydratedDeepLinkEntries);
    }
    return Promise.resolve();
}
exports.deepLinkingUpdate = deepLinkingUpdate;
function extractDeepLinkData(appNgModulePath, fileContent, isAot) {
    return util_1.getDeepLinkData(appNgModulePath, fileContent, isAot);
}
