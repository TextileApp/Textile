"use strict";
var path_1 = require('path');
var LOAD_CHILDREN_SPLIT_TOKEN = '#';
/* this is a very temporary approach to extracting deeplink data since the Angular compiler API has changed a bit */
function getLinksArrayContent(appNgModuleFileContent) {
    var LINKS_REGEX = /links\s*?:\s*\[([\s\S]*?)}\)/igm;
    var deepLinksContentMatches = LINKS_REGEX.exec(appNgModuleFileContent.toString());
    if (deepLinksContentMatches && deepLinksContentMatches.length === 2) {
        return deepLinksContentMatches[1];
    }
    return null;
}
function extractDeepLinkPathData(appNgModuleFileContent) {
    var linksInternalContent = getLinksArrayContent(appNgModuleFileContent);
    if (!linksInternalContent) {
        return null;
    }
    // parse into individual entries
    var results = getIndividualConfigEntries(linksInternalContent);
    // convert each long, multi-element string into it's proper fields
    var deepLinks = results.map(function (result) { return convertRawContentStringToParsedDeepLink(result); });
    var valid = validateDeepLinks(deepLinks);
    if (!valid) {
        throw new Error('Each deep link entry must contain a "name" entry, and a "component" or "loadChildren" entry');
    }
    return deepLinks;
}
exports.extractDeepLinkPathData = extractDeepLinkPathData;
function validateDeepLinks(deepLinks) {
    for (var _i = 0, deepLinks_1 = deepLinks; _i < deepLinks_1.length; _i++) {
        var deepLink = deepLinks_1[_i];
        if (!deepLink.name || deepLink.name.length === 0) {
            return false;
        }
        var missingComponent = !deepLink.component || deepLink.component.length === 0;
        var missingModulePath = !deepLink.modulePath || deepLink.modulePath.length === 0;
        var missingNamedExport = !deepLink.namedExport || deepLink.namedExport.length === 0;
        if (missingComponent && (missingModulePath || missingNamedExport)) {
            return false;
        }
    }
    return true;
}
exports.validateDeepLinks = validateDeepLinks;
function convertRawContentStringToParsedDeepLink(input) {
    var LOAD_CHILDREN_REGEX = /loadChildren\s*?:\s*?['"`]\s*?(.*?)['"`]/igm;
    var NAME_REGEX = /name\s*?:\s*?['"`]\s*?(.*?)['"`]/igm;
    var COMPONENT_REGEX = /component\s*?:(.*?)[,}]/igm;
    var loadChildrenValue = extractContentWithKnownMatch(input, LOAD_CHILDREN_REGEX);
    var nameValue = extractContentWithKnownMatch(input, NAME_REGEX);
    var componentValue = extractContentWithKnownMatch(input, COMPONENT_REGEX);
    var modulePath = null;
    var namedExport = null;
    if (loadChildrenValue) {
        var tokens = loadChildrenValue.split(LOAD_CHILDREN_SPLIT_TOKEN);
        if (tokens.length === 2) {
            modulePath = tokens[0];
            namedExport = tokens[1];
        }
    }
    return {
        component: componentValue,
        name: nameValue,
        modulePath: modulePath,
        namedExport: namedExport
    };
}
function extractContentWithKnownMatch(input, regex) {
    var result = regex.exec(input);
    if (result && result.length > 1) {
        return result[1].trim();
    }
    return null;
}
function getIndividualConfigEntries(content) {
    var match = null;
    var results = [];
    var INDIVIDUAL_ENTRIES_REGEX = /({.*?})/igm;
    while ((match = INDIVIDUAL_ENTRIES_REGEX.exec(content))) {
        if (!match) {
            break;
        }
        results.push(match[1].trim());
    }
    return results;
}
function getDeepLinkData(appNgModuleFilePath, appNgModuleFileContent, isAot) {
    var deepLinkConfigList = extractDeepLinkPathData(appNgModuleFileContent);
    if (!deepLinkConfigList) {
        return [];
    }
    var appDirectory = path_1.dirname(appNgModuleFilePath);
    var absolutePathSuffix = isAot ? '.ngfactory.ts' : '.ts';
    var modulePathSuffix = isAot ? '.ngfactory' : '';
    var namedExportSuffix = isAot ? 'NgFactory' : '';
    var hydratedDeepLinks = deepLinkConfigList.map(function (deepLinkConfigEntry) {
        return Object.assign({}, deepLinkConfigEntry, {
            modulePath: deepLinkConfigEntry.modulePath ? deepLinkConfigEntry.modulePath + modulePathSuffix : null,
            namedExport: deepLinkConfigEntry.namedExport ? deepLinkConfigEntry.namedExport + namedExportSuffix : null,
            absolutePath: deepLinkConfigEntry.modulePath ? path_1.join(appDirectory, deepLinkConfigEntry.modulePath + absolutePathSuffix) : null
        });
    });
    return hydratedDeepLinks;
}
exports.getDeepLinkData = getDeepLinkData;
;
