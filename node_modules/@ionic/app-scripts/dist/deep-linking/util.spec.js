"use strict";
var path_1 = require('path');
var util = require('./util');
describe('util', function () {
    describe('extractDeepLinkPathData', function () {
        it('should return the parsed deep link metadata', function () {
            var fileContent = "\nimport { NgModule } from '@angular/core';\nimport { IonicApp, IonicModule } from 'ionic-angular';\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\n\nimport * as Constants from '../util/constants';\n\n@NgModule({\n  declarations: [\n    MyApp,\n    HomePage\n  ],\n  imports: [\n    getSharedIonicModule()\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    HomePage\n  ],\n  providers: []\n})\nexport class AppModule {}\n\nexport function getSharedIonicModule() {\n  return IonicModule.forRoot(MyApp, {}, {\n    links: [\n      { loadChildren: '../pages/home/home.module#HomePageModule', name: 'Home' },\n      { name: \"PageOne\", loadChildren: \"../pages/page-one/page-one.module#PageOneModule\" },\n      { loadChildren: `../pages/page-two/page-two.module#PageTwoModule`, name: `PageTwo` },\n      { Component: MyComponent, name: 'SomePage'},\n      { name: 'SomePage2', Component: MyComponent2 }\n    ]\n  });\n}\n      ";
            var results = util.extractDeepLinkPathData(fileContent);
            expect(results).toBeTruthy();
            expect(results[0].component).toEqual(null);
            expect(results[0].name).toBe('Home');
            expect(results[0].modulePath).toBe('../pages/home/home.module');
            expect(results[0].namedExport).toBe('HomePageModule');
            expect(results[1].component).toEqual(null);
            expect(results[1].name).toBe('PageOne');
            expect(results[1].modulePath).toBe('../pages/page-one/page-one.module');
            expect(results[1].namedExport).toBe('PageOneModule');
            expect(results[2].component).toEqual(null);
            expect(results[2].name).toBe('PageTwo');
            expect(results[2].modulePath).toBe('../pages/page-two/page-two.module');
            expect(results[2].namedExport).toBe('PageTwoModule');
            expect(results[3].component).toEqual('MyComponent');
            expect(results[3].name).toBe('SomePage');
            expect(results[3].modulePath).toBe(null);
            expect(results[3].namedExport).toBe(null);
            expect(results[4].component).toEqual('MyComponent2');
            expect(results[4].name).toBe('SomePage2');
            expect(results[4].modulePath).toBe(null);
            expect(results[4].namedExport).toBe(null);
        });
        it('should handle configs with arrays in them', function () {
            var knownContent = "\n        @NgModule({\n  declarations: [\n    E2EApp,\n    FirstPage,\n    RedirectPage,\n    AnotherPage,\n    MyCmpTest,\n    MyCmpTest2,\n    PrimaryHeaderPage,\n    TabsPage,\n    Tab1,\n    Tab2,\n    Tab3,\n    TabItemPage\n  ],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(E2EApp, {\n      swipeBackEnabled: true\n    }, {\n      links: [\n        { component: FirstPage, name: 'first-page' },\n        { component: AnotherPage, name: 'another-page' },\n        { component: MyCmpTest, name: 'tab1-page1' },\n\n        { loadChildren: './pages/full-page/full-page.module#LinkModule', name: 'full-page', defaultHistory: ['first-page', 'another-page'] },\n\n        { component: PrimaryHeaderPage, name: 'primary-header-page', defaultHistory: ['first-page', 'full-page'] },\n        { component: Tabs, name: 'tabs' },\n        { component: Tab1, name: 'tab1' },\n        { component: TabItemPage, name: 'item' }\n      ]\n    })\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    E2EApp,\n    FirstPage,\n    RedirectPage,\n    AnotherPage,\n    PrimaryHeaderPage,\n    TabsPage,\n    Tab1,\n    Tab2,\n    Tab3,\n    TabItemPage\n  ]\n})\nexport class AppModule {}\n      ";
            var results = util.extractDeepLinkPathData(knownContent);
            expect(results[0].component).toEqual('FirstPage');
            expect(results[0].name).toEqual('first-page');
            expect(results[0].modulePath).toEqual(null);
            expect(results[0].namedExport).toEqual(null);
            expect(results[1].component).toEqual('AnotherPage');
            expect(results[1].name).toEqual('another-page');
            expect(results[1].modulePath).toEqual(null);
            expect(results[1].namedExport).toEqual(null);
            expect(results[2].component).toEqual('MyCmpTest');
            expect(results[2].name).toEqual('tab1-page1');
            expect(results[2].modulePath).toEqual(null);
            expect(results[2].namedExport).toEqual(null);
            expect(results[3].component).toEqual(null);
            expect(results[3].name).toEqual('full-page');
            expect(results[3].modulePath).toEqual('./pages/full-page/full-page.module');
            expect(results[3].namedExport).toEqual('LinkModule');
            expect(results[4].component).toEqual('PrimaryHeaderPage');
            expect(results[4].name).toEqual('primary-header-page');
            expect(results[4].modulePath).toEqual(null);
            expect(results[4].namedExport).toEqual(null);
            expect(results[5].component).toEqual('Tabs');
            expect(results[5].name).toEqual('tabs');
            expect(results[5].modulePath).toEqual(null);
            expect(results[5].namedExport).toEqual(null);
            expect(results[6].component).toEqual('Tab1');
            expect(results[6].name).toEqual('tab1');
            expect(results[6].modulePath).toEqual(null);
            expect(results[6].namedExport).toEqual(null);
            expect(results[7].component).toEqual('TabItemPage');
            expect(results[7].name).toEqual('item');
            expect(results[7].modulePath).toEqual(null);
            expect(results[7].namedExport).toEqual(null);
        });
        it('should throw an exception when there is an invalid deep link config', function () {
            // arrange
            var fileContent = "\nimport { NgModule } from '@angular/core';\nimport { IonicApp, IonicModule } from 'ionic-angular';\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\n\nimport * as Constants from '../util/constants';\n\n@NgModule({\n  declarations: [\n    MyApp,\n    HomePage\n  ],\n  imports: [\n    getSharedIonicModule()\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    HomePage\n  ],\n  providers: []\n})\nexport class AppModule {}\n\nexport function getSharedIonicModule() {\n  return IonicModule.forRoot(MyApp, {}, {\n    links: [\n      { loadChildren: '../pages/home/home.module#HomePageModule'},\n      { name: \"PageOne\", loadChildren: \"../pages/page-one/page-one.module#PageOneModule\" },\n      { loadChildren: `../pages/page-two/page-two.module#PageTwoModule`, name: `PageTwo` },\n      { Component: MyComponent, name: 'SomePage'},\n      { name: 'SomePage2', Component: MyComponent2 }\n    ]\n  });\n}\n      ";
            // act
            var knownMessage = 'Should never get here';
            try {
                util.extractDeepLinkPathData(fileContent);
                throw new Error(knownMessage);
            }
            catch (ex) {
                // assert
                expect(ex.message).not.toEqual(knownMessage);
            }
        });
    });
    describe('getDeepLinkData', function () {
        it('should return an empty list when no valid deep links are found', function () {
            var fileContent = "\nimport { NgModule } from '@angular/core';\nimport { IonicApp, IonicModule } from 'ionic-angular';\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\n\nimport * as Constants from '../util/constants';\n\n@NgModule({\n  declarations: [\n    MyApp,\n    HomePage\n  ],\n  imports: [\n    getSharedIonicModule()\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    HomePage\n  ],\n  providers: []\n})\nexport class AppModule {}\n\nexport function getSharedIonicModule() {\n  return IonicModule.forRoot(MyApp, {});\n}\n      ";
            var srcDir = '/Users/dan/Dev/myApp/src';
            var result = util.getDeepLinkData(path_1.join(srcDir, 'app/app.module.ts'), fileContent, false);
            expect(result).toBeTruthy();
            expect(result.length).toEqual(0);
        });
        it('should return a hydrated deep link config', function () {
            var fileContent = "\nimport { NgModule } from '@angular/core';\nimport { IonicApp, IonicModule } from 'ionic-angular';\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\n\nimport * as Constants from '../util/constants';\n\n@NgModule({\n  declarations: [\n    MyApp,\n    HomePage\n  ],\n  imports: [\n    getSharedIonicModule()\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    HomePage\n  ],\n  providers: []\n})\nexport class AppModule {}\n\nexport function getSharedIonicModule() {\n  return IonicModule.forRoot(MyApp, {}, {\n    links: [\n      { loadChildren: '../pages/home/home.module#HomePageModule', name: 'Home' },\n      { name: \"PageOne\", loadChildren: \"../pages/page-one/page-one.module#PageOneModule\" },\n      { loadChildren: `../pages/page-two/page-two.module#PageTwoModule`, name: `PageTwo` },\n      { Component: MyComponent, name: 'SomePage'},\n    ]\n  });\n}\n      ";
            var srcDir = '/Users/dan/Dev/myApp/src';
            var result = util.getDeepLinkData(path_1.join(srcDir, 'app/app.module.ts'), fileContent, false);
            expect(result[0].modulePath).toEqual('../pages/home/home.module');
            expect(result[0].namedExport).toEqual('HomePageModule');
            expect(result[0].name).toEqual('Home');
            expect(result[0].component).toEqual(null);
            expect(result[0].absolutePath).toEqual('/Users/dan/Dev/myApp/src/pages/home/home.module.ts');
            expect(result[1].modulePath).toEqual('../pages/page-one/page-one.module');
            expect(result[1].namedExport).toEqual('PageOneModule');
            expect(result[1].name).toEqual('PageOne');
            expect(result[1].component).toEqual(null);
            expect(result[1].absolutePath).toEqual('/Users/dan/Dev/myApp/src/pages/page-one/page-one.module.ts');
            expect(result[2].modulePath).toEqual('../pages/page-two/page-two.module');
            expect(result[2].namedExport).toEqual('PageTwoModule');
            expect(result[2].name).toEqual('PageTwo');
            expect(result[2].component).toEqual(null);
            expect(result[2].absolutePath).toEqual('/Users/dan/Dev/myApp/src/pages/page-two/page-two.module.ts');
            expect(result[3].modulePath).toEqual(null);
            expect(result[3].namedExport).toEqual(null);
            expect(result[3].name).toEqual('SomePage');
            expect(result[3].component).toEqual('MyComponent');
            expect(result[3].absolutePath).toEqual(null);
        });
        it('should return a deep link data adjusted for AoT', function () {
            var fileContent = "\nimport { NgModule } from '@angular/core';\nimport { IonicApp, IonicModule } from 'ionic-angular';\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\n\nimport * as Constants from '../util/constants';\n\n@NgModule({\n  declarations: [\n    MyApp,\n    HomePage\n  ],\n  imports: [\n    getSharedIonicModule()\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    HomePage\n  ],\n  providers: []\n})\nexport class AppModule {}\n\nexport function getSharedIonicModule() {\n  return IonicModule.forRoot(MyApp, {}, {\n    links: [\n      { loadChildren: '../pages/home/home.module#HomePageModule', name: 'Home' },\n      { name: \"PageOne\", loadChildren: \"../pages/page-one/page-one.module#PageOneModule\" },\n      { loadChildren: `../pages/page-two/page-two.module#PageTwoModule`, name: `PageTwo` },\n      { Component: MyComponent, name: 'SomePage'},\n    ]\n  });\n}\n      ";
            var srcDir = '/Users/dan/Dev/myApp/src';
            var result = util.getDeepLinkData(path_1.join(srcDir, 'app/app.module.ts'), fileContent, true);
            expect(result[0].modulePath).toEqual('../pages/home/home.module.ngfactory');
            expect(result[0].namedExport).toEqual('HomePageModuleNgFactory');
            expect(result[0].name).toEqual('Home');
            expect(result[0].component).toEqual(null);
            expect(result[0].absolutePath).toEqual('/Users/dan/Dev/myApp/src/pages/home/home.module.ngfactory.ts');
            expect(result[1].modulePath).toEqual('../pages/page-one/page-one.module.ngfactory');
            expect(result[1].namedExport).toEqual('PageOneModuleNgFactory');
            expect(result[1].name).toEqual('PageOne');
            expect(result[1].component).toEqual(null);
            expect(result[1].absolutePath).toEqual('/Users/dan/Dev/myApp/src/pages/page-one/page-one.module.ngfactory.ts');
            expect(result[2].modulePath).toEqual('../pages/page-two/page-two.module.ngfactory');
            expect(result[2].namedExport).toEqual('PageTwoModuleNgFactory');
            expect(result[2].name).toEqual('PageTwo');
            expect(result[2].component).toEqual(null);
            expect(result[2].absolutePath).toEqual('/Users/dan/Dev/myApp/src/pages/page-two/page-two.module.ngfactory.ts');
            expect(result[3].modulePath).toEqual(null);
            expect(result[3].namedExport).toEqual(null);
            expect(result[3].name).toEqual('SomePage');
            expect(result[3].component).toEqual('MyComponent');
            expect(result[3].absolutePath).toEqual(null);
        });
    });
    describe('validateDeepLinks', function () {
        it('should return false when one entry is missing name', function () {
            // arrange
            var invalidDeepLinkConfig = {
                name: null,
                component: {}
            };
            // act
            var result = util.validateDeepLinks([invalidDeepLinkConfig]);
            // assert
            expect(result).toEqual(false);
        });
        it('should return false when one entry has empty name', function () {
            // arrange
            var invalidDeepLinkConfig = {
                name: '',
                component: {}
            };
            // act
            var result = util.validateDeepLinks([invalidDeepLinkConfig]);
            // assert
            expect(result).toEqual(false);
        });
        it('should return false when missing component and (modulePath or namedExport)', function () {
            // arrange
            var invalidDeepLinkConfig = {
                name: 'someName',
                component: null,
                modulePath: null
            };
            // act
            var result = util.validateDeepLinks([invalidDeepLinkConfig]);
            // assert
            expect(result).toEqual(false);
        });
        it('should return false when missing component and (modulePath or namedExport)', function () {
            // arrange
            var invalidDeepLinkConfig = {
                name: 'someName',
                component: '',
                modulePath: ''
            };
            // act
            var result = util.validateDeepLinks([invalidDeepLinkConfig]);
            // assert
            expect(result).toEqual(false);
        });
        it('should return false when missing component and has valid modulePath but missing namedExport', function () {
            // arrange
            var invalidDeepLinkConfig = {
                name: 'someName',
                component: '',
                modulePath: 'somePath',
                namedExport: ''
            };
            // act
            var result = util.validateDeepLinks([invalidDeepLinkConfig]);
            // assert
            expect(result).toEqual(false);
        });
        it('should return true when it has a valid modulePath and namedExport', function () {
            // arrange
            var invalidDeepLinkConfig = {
                name: 'someName',
                component: '',
                modulePath: 'somePath',
                namedExport: 'someNamedExport'
            };
            // act
            var result = util.validateDeepLinks([invalidDeepLinkConfig]);
            // assert
            expect(result).toEqual(true);
        });
        it('should return true when it has a valid component', function () {
            // arrange
            var invalidDeepLinkConfig = {
                name: 'someName',
                component: 'MyComponent',
                modulePath: null,
                namedExport: null
            };
            // act
            var result = util.validateDeepLinks([invalidDeepLinkConfig]);
            // assert
            expect(result).toEqual(true);
        });
    });
});
