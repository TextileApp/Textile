{"version":3,"sources":["../src/ast.js"],"names":["applyChange","window","deepCompare","val1","val2","angular","fromJson","toJson","checkIfLegalToChain","key","_legalMethods","indexOf","Error","_query","TermBase","sendRequest","query","legalMethods","digest","_sendRequest","_digest","toString","string","collection","find","JSON","stringify","find_all","order","above","below","limit","watch","rawChanges","raw","do","makePresentable","share","fetch","map","val","$hz_v$","defaultIfEmpty","toArray","findAll","fieldValues","call","arguments","maxArgs","FindAll","idOrObject","Find","fields","direction","minArgs","Order","aboveSpec","bound","Above","belowSpec","Below","size","Limit","observable","pointQuery","Boolean","hasEmitted","seedVal","prev","filter","change","type","scan","state","new_val","old_val","x","emitted","slice","arr","old_offset","splice","index","findIndex","id","new_offset","push","writeOp","name","args","documents","isBatch","wrappedDocs","Array","isArray","length","empty","options","Object","assign","data","resp","error","_prevOb","create","subscribe","next","subscriber","err","complete","_lazyWrites","publishReplay","refCount","Collection","collectionName","lazyWrites","store","upsert","insert","replace","update","remove","documentOrId","wrapped","removeAll","documentsOrIds","item","previousQuery","findObject","wrappedFields","findAllQuery","option","UserDataTerm","hz","handshake","socket","_hz","_before","ignoreElements","merge","userId","mergeMap","take"],"mappings":"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","file":"ast.js","sourcesContent":["import { Observable } from 'rxjs/Observable'\nimport 'rxjs/add/observable/empty'\n\nimport 'rxjs/add/operator/publishReplay'\nimport 'rxjs/add/operator/scan'\nimport 'rxjs/add/operator/filter'\nimport 'rxjs/add/operator/map'\nimport 'rxjs/add/operator/toArray'\nimport 'rxjs/add/operator/defaultIfEmpty'\nimport 'rxjs/add/operator/ignoreElements'\nimport 'rxjs/add/operator/merge'\nimport 'rxjs/add/operator/mergeMap'\nimport 'rxjs/add/operator/take'\nimport 'rxjs/add/operator/do'\n\nimport snakeCase from 'snake-case'\nimport deepEqual from 'deep-equal'\n\nimport checkArgs from './util/check-args'\nimport validIndexValue from './util/valid-index-value.js'\nimport { serialize } from './serialization.js'\n\nimport watchRewrites from './hacks/watch-rewrites'\n\nlet window;\n\nfunction deepCompare(val1, val2) {\n  if (window && window.angular) {\n    return deepEqual(angular.fromJson(angular.toJson(val1)), angular.fromJson(angular.toJson(val1)));\n  }\n  return deepEqual(val1, val2);\n}\n\n\n/**\n @this TermBase\n\n Validation check to throw an exception if a method is chained onto a\n query that already has it. It belongs to TermBase, but we don't want\n to pollute the objects with it (since it isn't useful to api users),\n so it's dynamically bound with .call inside methods that use it.\n*/\nfunction checkIfLegalToChain(key) {\n  if (this._legalMethods.indexOf(key) === -1) {\n    throw new Error(`${key} cannot be called on the current query`)\n  }\n  if (snakeCase(key) in this._query) {\n    throw new Error(`${key} has already been called on this query`)\n  }\n}\n\n// Abstract base class for terms\nexport class TermBase {\n  constructor(sendRequest, query, legalMethods, digest) {\n    this._sendRequest = sendRequest\n    this._query = query\n    this._legalMethods = legalMethods\n    this._digest = digest\n    if (!this._digest) {\n      this._digest = () => {}\n    }\n  }\n\n  toString() {\n    let string = `Collection('${this._query.collection}')`\n    if (this._query.find) {\n      string += `.find(${JSON.stringify(this._query.find)})`\n    }\n    if (this._query.find_all) {\n      string += `.findAll(${JSON.stringify(this._query.find_all)})`\n    }\n    if (this._query.order) {\n      string += `.order(${JSON.stringify(this._query.order[0])}, ` +\n                       `${JSON.stringify(this._query.order[1])})`\n    }\n    if (this._query.above) {\n      string += `.above(${JSON.stringify(this.query.above[0])}, ` +\n                       `${JSON.stringify(this.query.above[1])})`\n    }\n    if (this._query.below) {\n      string += `.below(${JSON.stringify(this.query.below[0])}, ` +\n                       `${JSON.stringify(this.query.below[1])})`\n    }\n    if (this._query.limit) {\n      string += '.limit(this._query.limit))'\n    }\n    return string\n  }\n  // Returns a sequence of the result set. Every time it changes the\n  // updated sequence will be emitted. If raw change objects are\n  // needed, pass the option 'rawChanges: true'. An observable is\n  // returned which will lazily emit the query when it is subscribed\n  // to\n  watch({ rawChanges = false } = {}) {\n    const query = watchRewrites(this, this._query)\n    const raw = this._sendRequest('subscribe', query)\n    if (rawChanges) {\n      return raw.do(this._digest)\n    } else {\n      return makePresentable(raw, this._query).share().do(this._digest)\n    }\n  }\n  // Grab a snapshot of the current query (non-changefeed). Emits an\n  // array with all results. An observable is returned which will\n  // lazily emit the query when subscribed to\n  fetch() {\n    const raw = this._sendRequest('query', this._query).map(val => {\n      delete val.$hz_v$\n      return val\n    })\n    if (this._query.find) {\n      return raw.defaultIfEmpty(null).do(this._digest)\n    } else {\n      return raw.toArray().do(this._digest)\n    }\n  }\n  findAll(...fieldValues) {\n    checkIfLegalToChain.call(this, 'findAll')\n    checkArgs('findAll', arguments, { maxArgs: 100 })\n    return new FindAll(this._sendRequest, this._query, fieldValues, this._digest)\n  }\n  find(idOrObject) {\n    checkIfLegalToChain.call(this, 'find')\n    checkArgs('find', arguments)\n    return new Find(this._sendRequest, this._query, idOrObject, this._digest)\n  }\n  order(fields, direction = 'ascending') {\n    checkIfLegalToChain.call(this, 'order')\n    checkArgs('order', arguments, { minArgs: 1, maxArgs: 2 })\n    return new Order(this._sendRequest, this._query, fields, direction, this._digest)\n  }\n  above(aboveSpec, bound = 'closed') {\n    checkIfLegalToChain.call(this, 'above')\n    checkArgs('above', arguments, { minArgs: 1, maxArgs: 2 })\n    return new Above(this._sendRequest, this._query, aboveSpec, bound, this._digest)\n  }\n  below(belowSpec, bound = 'open') {\n    checkIfLegalToChain.call(this, 'below')\n    checkArgs('below', arguments, { minArgs: 1, maxArgs: 2 })\n    return new Below(this._sendRequest, this._query, belowSpec, bound, this._digest)\n  }\n  limit(size) {\n    checkIfLegalToChain.call(this, 'limit')\n    checkArgs('limit', arguments)\n    return new Limit(this._sendRequest, this._query, size, this._digest)\n  }\n}\n\n// Turn a raw observable of server responses into user-presentable events\n//\n// `observable` is the base observable with full responses coming from\n//              the IonicDBSocket\n// `query` is the value of `options` in the request\nfunction makePresentable(observable, query) {\n  // Whether the entire data structure is in each change\n  const pointQuery = Boolean(query.find)\n\n  if (pointQuery) {\n    let hasEmitted = false\n    const seedVal = { val: null, prev: {} };\n    // Simplest case: just pass through new_val\n    return observable\n      .filter(change => !hasEmitted || change.type !== 'state')\n      .scan((state, change) => {\n        hasEmitted = true\n        if (change.new_val != null) {\n          delete change.new_val.$hz_v$\n        }\n        if (change.old_val != null) {\n          delete change.old_val.$hz_v$\n        }\n        if (change.state === 'synced') {\n          return state\n        } else {\n          state.prev = state.val\n          state.val = change.new_val\n          return state\n        }\n      }, seedVal)\n      .filter(state => !deepCompare(state.val, state.prev))\n      .map(x => x.val)\n  } else {\n    const seedVal = { emitted: false, val: [], prev: null }\n    return observable\n      .scan((state, change) => {\n        if (change.new_val != null) {\n          delete change.new_val.$hz_v$\n        }\n        if (change.old_val != null) {\n          delete change.old_val.$hz_v$\n        }\n        if (change.state === 'synced') {\n          state.emitted = true\n        }\n        if (change.state === 'reconnecting') {\n          state.emitted = false\n          state.prev = state.val\n          state.val = []\n        }\n        state.val = applyChange(state.val.slice(), change)\n        return state\n      }, seedVal)\n      .filter(state => state.emitted && !deepCompare(state.val, state.prev))\n      .map(x => x.val)\n  }\n}\n\nexport function applyChange(arr, change) {\n  switch (change.type) {\n  case 'remove':\n  case 'uninitial': {\n    // Remove old values from the array\n    if (change.old_offset != null) {\n      arr.splice(change.old_offset, 1)\n    } else {\n      const index = arr.findIndex(x => deepCompare(x.id, change.old_val.id))\n      if (index === -1) {\n        // Programming error. This should not happen\n        throw new Error(\n          `change couldn't be applied: ${JSON.stringify(change)}`)\n      }\n      arr.splice(index, 1)\n    }\n    break\n  }\n  case 'add':\n  case 'initial': {\n    // Add new values to the array\n    if (change.new_offset != null) {\n      // If we have an offset, put it in the correct location\n      arr.splice(change.new_offset, 0, change.new_val)\n    } else {\n      // otherwise for unordered results, push it on the end\n      arr.push(change.new_val)\n    }\n    break\n  }\n  case 'change': {\n    // Modify in place if a change is happening\n    if (change.old_offset != null) {\n      // Remove the old document from the results\n      arr.splice(change.old_offset, 1)\n    }\n    if (change.new_offset != null) {\n      // Splice in the new val if we have an offset\n      arr.splice(change.new_offset, 0, change.new_val)\n    } else {\n      // If we don't have an offset, find the old val and\n      // replace it with the new val\n      const index = arr.findIndex(x => deepCompare(x.id, change.old_val.id))\n      if (index === -1) {\n        // indicates a programming bug. The server gives us the\n        // ordering, so if we don't find the id it means something is\n        // buggy.\n        throw new Error(\n          `change couldn't be applied: ${JSON.stringify(change)}`)\n      }\n      arr[index] = change.new_val\n    }\n    break\n  }\n  case 'state': {\n    // This gets hit if we have not emitted yet, and should\n    // result in an empty array being output.\n    break\n  }\n  default:\n    throw new Error(\n      `unrecognized 'type' field from server ${JSON.stringify(change)}`)\n  }\n  return arr\n}\n\n/** @this Collection\n Implements writeOps for the Collection class\n*/\nfunction writeOp(name, args, documents, digest) {\n  checkArgs(name, args)\n  let isBatch = true\n  let wrappedDocs = documents\n  if (!Array.isArray(documents)) {\n    // Wrap in an array if we need to\n    wrappedDocs = [ documents ]\n    isBatch = false\n  } else if (documents.length === 0) {\n    // Don't bother sending no-ops to the server\n    return Observable.empty()\n  }\n  const options = Object.assign(\n    {}, this._query, { data: serialize(wrappedDocs) })\n  let observable = this._sendRequest(name, options)\n  if (isBatch) {\n    // If this is a batch writeOp, each document may succeed or fail\n    // individually.\n    observable = observable.map(\n      resp => resp.error ? new Error(resp.error) : resp)\n  } else {\n    // If this is a single writeOp, the entire operation should fail\n    // if any fails.\n    const _prevOb = observable\n    observable = Observable.create(subscriber => {\n      _prevOb.subscribe({\n        next(resp) {\n          if (resp.error) {\n            // TODO: handle error ids when we get them\n            subscriber.error(new Error(resp.error))\n          } else {\n            subscriber.next(resp)\n          }\n        },\n        error(err) { subscriber.error(err) },\n        complete() { subscriber.complete() },\n      })\n    })\n  }\n  if (!this._lazyWrites) {\n    // Need to buffer response since this becomes a hot observable and\n    // when we subscribe matters\n    observable = observable.publishReplay().refCount()\n    observable.subscribe()\n  }\n  return observable.do(this._digest)\n}\n\nexport class Collection extends TermBase {\n  constructor(sendRequest, collectionName, lazyWrites, digest) {\n    const query = { collection: collectionName }\n    const legalMethods = [\n      'find', 'findAll', 'order', 'above', 'below', 'limit' ]\n    super(sendRequest, query, legalMethods, digest)\n    this._lazyWrites = lazyWrites\n  }\n  store(documents) {\n    return writeOp.call(this, 'store', arguments, documents)\n  }\n  upsert(documents) {\n    return writeOp.call(this, 'upsert', arguments, documents)\n  }\n  insert(documents) {\n    return writeOp.call(this, 'insert', arguments, documents)\n  }\n  replace(documents) {\n    return writeOp.call(this, 'replace', arguments, documents)\n  }\n  update(documents) {\n    return writeOp.call(this, 'update', arguments, documents)\n  }\n  remove(documentOrId) {\n    const wrapped = validIndexValue(documentOrId) ?\n          { id: documentOrId } : documentOrId\n    return writeOp.call(this, 'remove', arguments, wrapped)\n  }\n  removeAll(documentsOrIds) {\n    if (!Array.isArray(documentsOrIds)) {\n      throw new Error('removeAll takes an array as an argument')\n    }\n    const wrapped = documentsOrIds.map(item => {\n      if (validIndexValue(item)) {\n        return { id: item }\n      } else {\n        return item\n      }\n    })\n    return writeOp.call(this, 'removeAll', arguments, wrapped)\n  }\n}\n\nexport class Find extends TermBase {\n  constructor(sendRequest, previousQuery, idOrObject, digest) {\n    const findObject = validIndexValue(idOrObject) ?\n          { id: idOrObject } : idOrObject\n    const query = Object.assign({}, previousQuery, { find: findObject })\n    super(sendRequest, query, [], digest)\n  }\n}\n\nexport class FindAll extends TermBase {\n  constructor(sendRequest, previousQuery, fieldValues, digest) {\n    const wrappedFields = fieldValues\n          .map(item => validIndexValue(item) ? { id: item } : item)\n    const options = { find_all: wrappedFields }\n    const findAllQuery = Object.assign({}, previousQuery, options)\n    let legalMethods\n    if (wrappedFields.length === 1) {\n      legalMethods = [ 'order', 'above', 'below', 'limit' ]\n    } else {\n      // The vararg version of findAll cannot have anything chained to it\n      legalMethods = []\n    }\n    super(sendRequest, findAllQuery, legalMethods, digest)\n  }\n}\n\nexport class Above extends TermBase {\n  constructor(sendRequest, previousQuery, aboveSpec, bound, digest) {\n    const option = { above: [ aboveSpec, bound ] }\n    const query = Object.assign({}, previousQuery, option)\n    const legalMethods = [ 'findAll', 'order', 'below', 'limit' ]\n    super(sendRequest, query, legalMethods, digest)\n  }\n}\n\nexport class Below extends TermBase {\n  constructor(sendRequest, previousQuery, belowSpec, bound, digest) {\n    const options = { below: [ belowSpec, bound ] }\n    const query = Object.assign({}, previousQuery, options)\n    const legalMethods = [ 'findAll', 'order', 'above', 'limit' ]\n    super(sendRequest, query, legalMethods, digest)\n  }\n}\n\nexport class Order extends TermBase {\n  constructor(sendRequest, previousQuery, fields, direction, digest) {\n    const wrappedFields = Array.isArray(fields) ? fields : [ fields ]\n    const options = { order: [ wrappedFields, direction ] }\n    const query = Object.assign({}, previousQuery, options)\n    const legalMethods = [ 'findAll', 'above', 'below', 'limit' ]\n    super(sendRequest, query, legalMethods, digest)\n  }\n}\n\nexport class Limit extends TermBase {\n  constructor(sendRequest, previousQuery, size, digest) {\n    const query = Object.assign({}, previousQuery, { limit: size })\n    // Nothing is legal to chain after .limit\n    super(sendRequest, query, [], digest)\n  }\n}\n\n\nexport class UserDataTerm {\n  constructor(hz, handshake, socket) {\n    this._hz = hz\n    this._before = socket.ignoreElements().merge(handshake)\n  }\n\n  _query(userId) {\n    return this._hz.collection('users').find(userId)\n  }\n\n  fetch() {\n    return this._before.mergeMap(handshake => {\n        if (handshake.id == null) {\n          throw new Error('Unauthenticated users have no user document')\n        } else {\n          return this._query(handshake.id).fetch()\n        }\n      }).take(1) // necessary so that we complete, since _before is\n                 // infinite\n  }\n\n  watch(...args) {\n    return this._before.mergeMap(handshake => {\n      if (handshake.id === null) {\n        throw new Error('Unauthenticated users have no user document')\n      } else {\n        return this._query(handshake.id).watch(...args)\n      }\n    })\n  }\n}\n"]}