{"version":3,"sources":["../src/serialization.js"],"names":["deserialize","serialize","PRIMITIVES","modifyObject","doc","Object","keys","forEach","key","value","indexOf","Array","isArray","map","$reql_type$","date","Date","setTime","epoch_time","jsonifyObject","getTime","timezone"],"mappings":";;;;;;;;QAUgBA,W,GAAAA,W;QAuBAC,S,GAAAA,S;;;;AAjChB,IAAMC,aAAa,CACjB,QADiB,EACP,QADO,EACG,SADH,EACc,UADd,EAC0B,QAD1B,CAAnB;;AAGA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzBC,SAAOC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAAyB,eAAO;AAC9BH,QAAII,GAAJ,IAAWR,YAAYI,IAAII,GAAJ,CAAZ,CAAX;AACD,GAFD;AAGA,SAAOJ,GAAP;AACD;;AAEM,SAASJ,WAAT,CAAqBS,KAArB,EAA4B;AACjC,MAAIA,SAAS,IAAb,EAAmB;AACjB,WAAOA,KAAP;AACD,GAFD,MAEO,IAAIP,WAAWQ,OAAX,QAA0BD,KAA1B,uDAA0BA,KAA1B,OAAqC,CAAC,CAA1C,EAA6C;AAClD,WAAOA,KAAP;AACD,GAFM,MAEA,IAAIE,MAAMC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AAC/B,WAAOA,MAAMI,GAAN,CAAUb,WAAV,CAAP;AACD,GAFM,MAEA,IAAIS,MAAMK,WAAN,KAAsB,MAA1B,EAAkC;AACvC,QAAMC,OAAO,IAAIC,IAAJ,EAAb;AACAD,SAAKE,OAAL,CAAaR,MAAMS,UAAN,GAAmB,IAAhC;AACA,WAAOH,IAAP;AACD,GAJM,MAIA;AACL,WAAOZ,aAAaM,KAAb,CAAP;AACD;AACF;;AAED,SAASU,aAAT,CAAuBf,GAAvB,EAA4B;AAC1BC,SAAOC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAAyB,eAAO;AAC9BH,QAAII,GAAJ,IAAWP,UAAUG,IAAII,GAAJ,CAAV,CAAX;AACD,GAFD;AAGA,SAAOJ,GAAP;AACD;;AAEM,SAASH,SAAT,CAAmBQ,KAAnB,EAA0B;AAC/B,MAAIA,SAAS,IAAb,EAAmB;AACjB,WAAOA,KAAP;AACD,GAFD,MAEO,IAAIP,WAAWQ,OAAX,QAA0BD,KAA1B,uDAA0BA,KAA1B,OAAqC,CAAC,CAA1C,EAA6C;AAClD,WAAOA,KAAP;AACD,GAFM,MAEA,IAAIE,MAAMC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AAC/B,WAAOA,MAAMI,GAAN,CAAUZ,SAAV,CAAP;AACD,GAFM,MAEA,IAAIQ,iBAAiBO,IAArB,EAA2B;AAChC,WAAO;AACLF,mBAAa,MADR;AAELI,kBAAYT,MAAMW,OAAN,KAAkB,IAFzB;AAGL;AACAC,gBAAU;AAJL,KAAP;AAMD,GAPM,MAOA;AACL,WAAOF,cAAcV,KAAd,CAAP;AACD;AACF","file":"serialization.js","sourcesContent":["const PRIMITIVES = [\n  'string', 'number', 'boolean', 'function', 'symbol' ]\n\nfunction modifyObject(doc) {\n  Object.keys(doc).forEach(key => {\n    doc[key] = deserialize(doc[key])\n  })\n  return doc\n}\n\nexport function deserialize(value) {\n  if (value == null) {\n    return value\n  } else if (PRIMITIVES.indexOf(typeof value) !== -1) {\n    return value\n  } else if (Array.isArray(value)) {\n    return value.map(deserialize)\n  } else if (value.$reql_type$ === 'TIME') {\n    const date = new Date()\n    date.setTime(value.epoch_time * 1000)\n    return date\n  } else {\n    return modifyObject(value)\n  }\n}\n\nfunction jsonifyObject(doc) {\n  Object.keys(doc).forEach(key => {\n    doc[key] = serialize(doc[key])\n  })\n  return doc\n}\n\nexport function serialize(value) {\n  if (value == null) {\n    return value\n  } else if (PRIMITIVES.indexOf(typeof value) !== -1) {\n    return value\n  } else if (Array.isArray(value)) {\n    return value.map(serialize)\n  } else if (value instanceof Date) {\n    return {\n      $reql_type$: 'TIME',\n      epoch_time: value.getTime() / 1000,\n      // Rethink will serialize this as \"+00:00\", but accepts Z\n      timezone: 'Z',\n    }\n  } else {\n    return jsonifyObject(value)\n  }\n}\n"]}