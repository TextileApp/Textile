{"version":3,"sources":["../../src/util/check-args.js"],"names":["checkArgs","name","args","nullable","minArgs","maxArgs","length","plural","Error","plural1","plural2","i","ordinality","undefined"],"mappings":";;;kBAGwBA,S;;AAHxB;;;;;;AAEA;AACe,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAGkC;AAAA,iFAAJ,EAAI;AAAA,2BAF7BC,QAE6B;AAAA,MAFnBA,QAEmB,iCAFR,KAEQ;AAAA,0BAD7BC,OAC6B;AAAA,MADpBA,OACoB,gCADV,CACU;AAAA,0BAA7BC,OAA6B;AAAA,MAApBA,OAAoB,gCAAV,CAAU;;AAC/C,MAAID,YAAYC,OAAZ,IAAuBH,KAAKI,MAAL,KAAgBF,OAA3C,EAAoD;AAClD,QAAMG,SAASH,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,GAApC;AACA,UAAM,IAAII,KAAJ,CAAaP,IAAb,8BAA0CG,OAA1C,iBAA6DG,MAA7D,CAAN;AACD;AACD,MAAIL,KAAKI,MAAL,GAAcF,OAAlB,EAA2B;AACzB,QAAMK,UAAUL,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,GAArC;AACA,UAAM,IAAII,KAAJ,CACDP,IADC,+BAC6BG,OAD7B,iBACgDK,OADhD,OAAN;AAED;AACD,MAAIP,KAAKI,MAAL,GAAcD,OAAlB,EAA2B;AACzB,QAAMK,UAAUL,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,GAArC;AACA,UAAM,IAAIG,KAAJ,CACDP,IADC,yBACuBI,OADvB,iBAC0CK,OAD1C,OAAN;AAED;AACD,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,KAAKI,MAAzB,EAAiCK,GAAjC,EAAsC;AACpC,QAAI,CAACR,QAAD,IAAaD,KAAKS,CAAL,MAAY,IAA7B,EAAmC;AACjC,UAAMC,aAAaP,YAAY,CAAZ,SAAoB,uBAAQM,IAAI,CAAZ,CAApB,GAAuC,EAA1D;AACA,YAAM,IAAIH,KAAJ,SAAgBI,UAAhB,qBAA0CX,IAA1C,uBAAN;AACD;AACD,QAAIC,KAAKS,CAAL,MAAYE,SAAhB,EAA2B;AACzB,YAAM,IAAIL,KAAJ,UACG,uBAAQG,IAAI,CAAZ,CADH,qBACiCV,IADjC,sBAAN;AAED;AACF;AACF","file":"check-args.js","sourcesContent":["import ordinal from './ordinal.js'\n\n// Validation helper\nexport default function checkArgs(name, args, {\n                    nullable: nullable = false,\n                    minArgs: minArgs = 1,\n                    maxArgs: maxArgs = 1 } = {}) {\n  if (minArgs === maxArgs && args.length !== minArgs) {\n    const plural = minArgs === 1 ? '' : 's'\n    throw new Error(`${name} must receive exactly ${minArgs} argument${plural}`)\n  }\n  if (args.length < minArgs) {\n    const plural1 = minArgs === 1 ? '' : 's'\n    throw new Error(\n      `${name} must receive at least ${minArgs} argument${plural1}.`)\n  }\n  if (args.length > maxArgs) {\n    const plural2 = maxArgs === 1 ? '' : 's'\n    throw new Error(\n      `${name} accepts at most ${maxArgs} argument${plural2}.`)\n  }\n  for (let i = 0; i < args.length; i++) {\n    if (!nullable && args[i] === null) {\n      const ordinality = maxArgs !== 1 ? ` ${ordinal(i + 1)}` : ''\n      throw new Error(`The${ordinality} argument to ${name} must be non-null`)\n    }\n    if (args[i] === undefined) {\n      throw new Error(\n        `The ${ordinal(i + 1)} argument to ${name} must be defined`)\n    }\n  }\n}\n"]}