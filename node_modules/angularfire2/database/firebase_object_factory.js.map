{"version":3,"file":"firebase_object_factory.js","sourceRoot":"","sources":["../../src/database/firebase_object_factory.ts"],"names":[],"mappings":"OAAO,EAAE,wBAAwB,EAAE,MAAM,SAAS;OAE3C,EAAE,SAAS,EAAE,MAAM,yBAAyB;OAC5C,KAAK,QAAQ,MAAM,UAAU;OAC7B,KAAK,KAAK,MAAM,UAAU;AAGjC,sCACE,kBAAwD,EACxD,EAAoD;QAAlD,6DAAgB;IAElB,IAAI,GAAgC,CAAC;IAErC,KAAK,CAAC,wBAAwB,CAAC,kBAAkB,EAAE;QACjD,KAAK,EAAE,cAAM,OAAA,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAS,kBAAkB,CAAC,EAAhE,CAAgE;QAC7E,KAAK,EAAE,cAAM,OAAA,GAAG,GAAgC,kBAAkB,EAArD,CAAqD;KACnE,CAAC,CAAC;IAEH,IAAM,gBAAgB,GAAG,IAAI,wBAAwB,CAAC,UAAC,GAAkB;QACvE,IAAI,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,QAAwC;YAChE,GAAG,CAAC,IAAI,CAAC,gBAAgB,GAAG,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrE,CAAC,EAAE,UAAA,GAAG;YACJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,cAAM,OAAA,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,EAApB,CAAoB,CAAC;IACpC,CAAC,EAAE,GAAG,CAAC,CAAC;IAGR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AACjF,CAAC","sourcesContent":["import { FirebaseObjectObservable } from './index';\nimport { Observer } from 'rxjs/Observer';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport * as firebase from 'firebase';\nimport * as utils from '../utils';\nimport { FirebaseObjectFactoryOpts } from '../interfaces';\n\nexport function FirebaseObjectFactory (\n  absoluteUrlOrDbRef: string | firebase.database.Reference,\n  { preserveSnapshot }: FirebaseObjectFactoryOpts = {}): FirebaseObjectObservable<any> {\n\n  let ref: firebase.database.Reference;\n\n  utils.checkForUrlOrFirebaseRef(absoluteUrlOrDbRef, {\n    isUrl: () => ref = firebase.database().refFromURL(<string>absoluteUrlOrDbRef),\n    isRef: () => ref = <firebase.database.Reference>absoluteUrlOrDbRef\n  });\n\n  const objectObservable = new FirebaseObjectObservable((obs: Observer<any>) => {\n    let fn = ref.on('value', (snapshot: firebase.database.DataSnapshot) => {\n      obs.next(preserveSnapshot ? snapshot : utils.unwrapMapFn(snapshot))\n    }, err => {\n      if (err) { obs.error(err); obs.complete(); }\n    });\n\n    return () => ref.off('value', fn);\n  }, ref);\n\n  // TODO: should be in the subscription zone instead\n  return observeOn.call(objectObservable, new utils.ZoneScheduler(Zone.current));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}