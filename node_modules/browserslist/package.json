{
  "_args": [
    [
      {
        "raw": "browserslist@~1.3.6",
        "scope": null,
        "escapedName": "browserslist",
        "name": "browserslist",
        "rawSpec": "~1.3.6",
        "spec": ">=1.3.6 <1.4.0",
        "type": "range"
      },
      "/Users/Matthew/Textile/node_modules/autoprefixer"
    ]
  ],
  "_from": "browserslist@>=1.3.6 <1.4.0",
  "_id": "browserslist@1.3.6",
  "_inCache": true,
  "_location": "/browserslist",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/browserslist-1.3.6.tgz_1471892279258_0.7457300880923867"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "browserslist@~1.3.6",
    "scope": null,
    "escapedName": "browserslist",
    "name": "browserslist",
    "rawSpec": "~1.3.6",
    "spec": ">=1.3.6 <1.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/autoprefixer"
  ],
  "_resolved": "https://registry.npmjs.org/browserslist/-/browserslist-1.3.6.tgz",
  "_shasum": "952ff48d56463d3b538f85ef2f8eaddfd284b133",
  "_shrinkwrap": null,
  "_spec": "browserslist@~1.3.6",
  "_where": "/Users/Matthew/Textile/node_modules/autoprefixer",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bin": {
    "browserslist": "./cli.js"
  },
  "bugs": {
    "url": "https://github.com/ai/browserslist/issues"
  },
  "dependencies": {
    "caniuse-db": "^1.0.30000525"
  },
  "description": "Get browsers versions that matches given criterias like in Autoprefixer",
  "devDependencies": {
    "ava": "0.16.0",
    "eslint": "3.3.1",
    "eslint-config-postcss": "2.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "952ff48d56463d3b538f85ef2f8eaddfd284b133",
    "tarball": "https://registry.npmjs.org/browserslist/-/browserslist-1.3.6.tgz"
  },
  "gitHead": "ce6d3b7ab8d9bce76ef10b8e6fcccbec1b6d10e8",
  "homepage": "https://github.com/ai/browserslist#readme",
  "keywords": [
    "caniuse",
    "browsers"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "browserslist",
  "optionalDependencies": {},
  "readme": "# Browserslist [![Build Status][ci-img]][ci]\n\nGet browser versions that match given criteria.\nUseful for tools like [Autoprefixer].\n\nYou can select browsers by passing a string. This library will use\nCan I Use data to return list of all matching versions.\nFor example, query to select all browser versions that are the last version\nof each major browser, or have a usage of over 10% in global usage statistics:\n\n```js\nbrowserslist('last 1 version, > 10%');\n//=> [\"and_chr 51\", \"chrome 52\", \"chrome 51\", \"edge 14\", \"firefox 48\",\n//    \"ie 11\", \"ie_mob 11\", \"ios_saf 9.3\", \"opera 39\", \"safari 9.1\"]\n```\n\nTo share browser support with users, you can use [browserl.ist](http://browserl.ist/).\n\n<a href=\"https://evilmartians.com/?utm_source=browserslist\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n    alt=\"Sponsored by Evil Martians\"\n    width=\"236\"\n    height=\"54\"\n  \\>\n</a>\n\n[Autoprefixer]: https://github.com/postcss/autoprefixer\n[ci-img]:       https://travis-ci.org/ai/browserslist.svg\n[ci]:           https://travis-ci.org/ai/browserslist\n\n## Queries\n\nBrowserslist will use browsers criterias from:\n\n1. First argument.\n2. `BROWSERSLIST` environment variable.\n3. `browserslist` config file in current or parent directories.\n4. If all methods will not give a result, Browserslist will use defaults:\n   `> 1%, last 2 versions, Firefox ESR`.\n\nMultiple criteria are combined as a boolean `OR`. A browser version must match\nat least one of the criteria to be selected.\n\nYou can specify the versions by queries (case insensitive):\n\n* `last 2 versions`: the last 2 versions for each major browser.\n* `last 2 Chrome versions`: the last 2 versions of Chrome browser.\n* `> 5%`: versions selected by global usage statistics.\n* `> 5% in US`: uses USA usage statistics. It accepts [two-letter country code].\n* `> 5% in my stats`: uses [custom usage data].\n* `ie 6-8`: selects an inclusive range of versions.\n* `Firefox > 20`: versions of Firefox newer than 20.\n* `Firefox >= 20`: versions of Firefox newer than or equal to 20.\n* `Firefox < 20`: versions of Firefox less than 20.\n* `Firefox <= 20`: versions of Firefox less than or equal to 20.\n* `Firefox ESR`: the latest [Firefox ESR] version.\n* `iOS 7`: the iOS browser version 7 directly.\n* `not ie <= 8`: exclude browsers selected before by previous queries.\n  You can add `not ` to any query.\n\nBrowserslist works with separated versions of browsers.\nYou should avoid queries like `Firefox > 0`.\n\nAll queries are based on the [Can I Use] support table, e. g. `last 3 iOS versions` might select `8.4, 9.2, 9.3` (mixed major & minor), whereas `last 3 Chrome versions` might select `50, 49, 48` (major only).\n\n[two-letter country code]: http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n[custom usage data]:       #custom-usage-data\n[Can I Use]:               http://caniuse.com/\n\n## Browsers\n\nNames are case insensitive:\n\n### Major Browsers\n\n* `Chrome` for Google Chrome.\n* `Firefox` or `ff` for Mozilla Firefox.\n* `Explorer` or `ie` for Internet Explorer.\n* `Edge` for Microsoft Edge.\n* `iOS` or `ios_saf` for iOS Safari.\n* `Opera` for Opera.\n* `Safari` for desktop Safari.\n* `ExplorerMobile` or `ie_mob` for Internet Explorer Mobile.\n\n### Other\n\n* `Android` for Android WebView.\n* `BlackBerry` or `bb` for Blackberry browser.\n* `ChromeAndroid` or `and_chr` for Chrome for Android\n  (in Other section, because mostly same as common `Chrome`).\n* `FirefoxAndroid` or `and_ff` for Firefox for Android.\n* `OperaMobile` or `op_mob` for Opera Mobile.\n* `OperaMini` or `op_mini` for Opera Mini.\n* `Samsung` for Samsung Internet.\n* `UCAndroid` or `and_uc` for UC Browser for Android.\n\n## Config File\n\nBrowserslist’s config should be named `browserslist` and have browsers queries\nsplit by a new line. Comments starts with `#` symbol:\n\n```yaml\n# Browsers that we support\n\n> 1%\nLast 2 versions\nIE 8 # sorry\n```\n\nBrowserslist will check config in every directory in `path`.\nSo, if tool process `app/styles/main.css`, you can put config to root,\n`app/` or `app/styles`.\n\nYou can specify direct path to config by `config` option\nor `BROWSERSLIST_CONFIG` environment variables.\n\n## Environment Variables\n\nIf some tool use Browserslist inside, you can change browsers settings\nby [environment variables]:\n\n* `BROWSERSLIST` with browsers queries.\n\n   ```sh\n  BROWSERSLIST=\"> 5%\" gulp css\n   ```\n\n* `BROWSERSLIST_CONFIG` with path to config file.\n\n   ```sh\n  BROWSERSLIST_CONFIG=./config/browserslist gulp css\n   ```\n\n* `BROWSERSLIST_STATS` with path to the custom usage data.\n\n   ```sh\n  BROWSERSLIST_STATS=./config/usage_data.json gulp css\n   ```\n\n[environment variables]: https://en.wikipedia.org/wiki/Environment_variable\n\n## Custom Usage Data\n\nIf you have a website, you can query against the usage statistics of your site:\n\n1. Import your Google Analytics data into [Can I Use].\n   Press `Import…` button in Settings page.\n2. Open browser DevTools on [caniuse.com] add paste this snippet into Console:\n\n    ```js\n   var e=document.createElement('a');e.setAttribute('href', 'data:text/plain;charset=utf-8,'+encodeURIComponent(JSON.stringify(JSON.parse(localStorage['usage-data-by-id'])[localStorage['config-primary_usage']])));e.setAttribute('download','stats.json');document.body.appendChild(e);e.click();document.body.removeChild(e);\n    ```\n3. Save data to file in your project.\n4. Give it to Browserslist by `stats` option\n   or `BROWSERSLIST_STATS` environment variable:\n\n    ```js\n   browserslist('> 5% in my stats', { stats: 'path/to/the/stats.json' });\n    ```\n\nOf course, you can generate usage statistics file by any other method.\nOption `stats` accepts path to file or data itself:\n\n```js\nvar custom = {\n    ie: {\n        6: 0.01,\n        7: 0.4,\n        8: 1.5\n    },\n    chrome: {\n        …\n    },\n    …\n};\n\nbrowserslist('> 5% in my stats', { stats: custom });\n```\n\nNote that you can query against your custom usage data while also querying\nagainst global or regional data. For example, the query\n`> 5% in my stats, > 1%, > 10% in US` is permitted.\n\n[Can I Use]: http://caniuse.com/\n\n## Usage\n\n```js\nvar browserslist = require('browserslist');\n\n// Your CSS/JS build tool code\nvar process = function (css, opts) {\n    var browsers = browserslist(opts.browsers, { path: opts.file });\n    // Your code to add features for selected browsers\n}\n```\n\nQueries can be a string `\"> 5%, last 1 version\"`\nor an array `['> 5%', 'last 1 version']`.\n\nIf a query is missing, Browserslist will look for a config file.\nYou can provide a `path` option (that can be a file) to find the config file\nrelatively to it.\n\nFor non-JS environment and debug purpose you can use CLI tool:\n\n```sh\nbrowserslist \"> 1%, last 2 version\"\n```\n\n## Coverage\n\nYou can get total users coverage for selected browsers by JS API:\n\n```js\nbrowserslist.coverage(browserslist('> 1%')) //=> 81.4\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in US'), 'US') //=> 83.1\n```\n\nOr by CLI:\n\n```sh\n$ browserslist --coverage \"> 1%\"\nThese browsers account for 81.4% of all users globally\n```\n\n```sh\n$ browserslist --coverage=US \"> 1% in US\"\nThese browsers account for 83.1% of all users in the US\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ai/browserslist.git"
  },
  "scripts": {
    "test": "ava && eslint *.js test/*.js"
  },
  "version": "1.3.6"
}
