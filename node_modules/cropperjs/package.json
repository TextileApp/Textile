{
  "_args": [
    [
      {
        "raw": "cropperjs@1.0.0-rc.1",
        "scope": null,
        "escapedName": "cropperjs",
        "name": "cropperjs",
        "rawSpec": "1.0.0-rc.1",
        "spec": "1.0.0-rc.1",
        "type": "version"
      },
      "/Users/Matthew/Textile"
    ]
  ],
  "_from": "cropperjs@1.0.0-rc.1",
  "_id": "cropperjs@1.0.0-rc.1",
  "_inCache": true,
  "_location": "/cropperjs",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/cropperjs-1.0.0-rc.1.tgz_1493523145445_0.9970072715077549"
  },
  "_npmUser": {
    "name": "fengyuanchen",
    "email": "chenfengyuan@outlook.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cropperjs@1.0.0-rc.1",
    "scope": null,
    "escapedName": "cropperjs",
    "name": "cropperjs",
    "rawSpec": "1.0.0-rc.1",
    "spec": "1.0.0-rc.1",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cropperjs/-/cropperjs-1.0.0-rc.1.tgz",
  "_shasum": "6fceb36d263f873587e1508c665297fdc5938aba",
  "_shrinkwrap": null,
  "_spec": "cropperjs@1.0.0-rc.1",
  "_where": "/Users/Matthew/Textile",
  "author": {
    "name": "Fengyuan Chen",
    "url": "http://chenfengyuan.com"
  },
  "browser": "dist/cropper.js",
  "bugs": {
    "url": "https://github.com/fengyuanchen/cropperjs/issues"
  },
  "dependencies": {},
  "description": "JavaScript image cropper.",
  "devDependencies": {
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-es2015": "^6.22.0",
    "cssnano": "^3.10.0",
    "eslint": "^3.14.0",
    "eslint-config-airbnb-base": "^10.0.1",
    "eslint-plugin-import": "^2.2.0",
    "node-qunit-phantomjs": "^1.5.0",
    "npm-run-all": "^3.1.2",
    "postcss-assets": "^4.1.0",
    "postcss-cli": "^2.6.0",
    "postcss-cssnext": "^2.9.0",
    "rollup": "^0.36.4",
    "rollup-plugin-babel": "^2.7.1",
    "rollup-watch": "^2.5.0",
    "uglify-js": "^2.7.5"
  },
  "directories": {},
  "dist": {
    "shasum": "6fceb36d263f873587e1508c665297fdc5938aba",
    "tarball": "https://registry.npmjs.org/cropperjs/-/cropperjs-1.0.0-rc.1.tgz"
  },
  "gitHead": "00dc42b81c07d03785bd20525993fec0b1980363",
  "homepage": "https://fengyuanchen.github.io/cropperjs",
  "keywords": [
    "image",
    "crop",
    "cropping",
    "move",
    "zoom",
    "rotate",
    "scale",
    "cropper",
    "cropperjs",
    "cropper.js",
    "html",
    "css",
    "javascript",
    "front-end",
    "web",
    "development"
  ],
  "license": "MIT",
  "main": "dist/cropper.common.js",
  "maintainers": [
    {
      "name": "fengyuanchen",
      "email": "cfy.org@gmail.com"
    }
  ],
  "module": "dist/cropper.esm.js",
  "name": "cropperjs",
  "optionalDependencies": {},
  "readme": "# Cropper.js\n\n> JavaScript image cropper.\n\n- [Website](https://fengyuanchen.github.io/cropperjs)\n- [Photo Editor](https://fengyuanchen.github.io/photo-editor) - An advanced example of Cropper.js.\n\n[![Build Status Images](https://travis-ci.org/fengyuanchen/cropperjs.svg)](https://travis-ci.org/fengyuanchen/cropperjs)\n\n\n\n## Table of contents\n\n- [Features](#features)\n- [Main](#main)\n- [Getting started](#getting-started)\n- [Options](#options)\n- [Methods](#methods)\n- [Events](#events)\n- [No conflict](#no-conflict)\n- [Browser support](#browser-support)\n- [Contributing](#contributing)\n- [Versioning](#versioning)\n- [License](#license)\n\n\n\n## Features\n\n- Supports 38 [options](#options)\n- Supports 27 [methods](#methods)\n- Supports 6 [events](#events)\n- Supports touch (mobile)\n- Supports zooming\n- Supports rotating\n- Supports scaling (flipping)\n- Supports multiple croppers\n- Supports to crop on a canvas\n- Supports to crop image in the browser-side by canvas\n- Supports to translate Exif Orientation information\n- Cross-browser support\n\n\n\n## Main\n\n```\ndist/\n├── cropper.css       ( 5 KB)\n├── cropper.min.css   ( 4 KB)\n├── cropper.js        (90 KB, UMD)\n├── cropper.min.js    (33 KB, UMD, compressed)\n├── cropper.common.js (90 KB, CommonJS)\n└── cropper.esm.js    (90 KB, ES Module)\n```\n\n\n## Getting started\n\n### Quick start\n\nFour quick start options are available:\n\n- [Download the latest release](https://github.com/fengyuanchen/cropperjs/archive/master.zip).\n- Clone the repository: `git clone https://github.com/fengyuanchen/cropperjs.git`.\n- Install with [NPM](https://npmjs.com): `npm install cropperjs`.\n- Install with [Bower](https://bower.io): `bower install cropperjs`.\n\n\n### Installation\n\nInclude files:\n\n```html\n<link  href=\"/path/to/cropper.css\" rel=\"stylesheet\">\n<script src=\"/path/to/cropper.js\"></script>\n```\n\nThe [cdnjs](https://github.com/cdnjs/cdnjs) provides CDN support for Cropper.js's CSS and JavaScript. You can find the links [here](https://cdnjs.com/libraries/cropperjs).\n\n\n### Usage\n\nInitialize with `Cropper` constructor:\n\n- Browser: `window.Cropper`\n- CommonJS: `var Cropper = require('cropperjs')`\n- NodeJS: `var Cropper = require('cropperjs')`\n- ES2015: `import Cropper from 'cropperjs'`\n\n```html\n<!-- Wrap the image or canvas element with a block element (container) -->\n<div>\n  <img id=\"image\" src=\"picture.jpg\">\n</div>\n```\n\n```css\n/* Limit image width to avoid overflow the container */\nimg {\n  max-width: 100%; /* This rule is very important, please do not ignore this! */\n}\n```\n\n```js\nvar image = document.getElementById('image');\nvar cropper = new Cropper(image, {\n  aspectRatio: 16 / 9,\n  crop: function(e) {\n    console.log(e.detail.x);\n    console.log(e.detail.y);\n    console.log(e.detail.width);\n    console.log(e.detail.height);\n    console.log(e.detail.rotate);\n    console.log(e.detail.scaleX);\n    console.log(e.detail.scaleY);\n  }\n});\n```\n\n\n#### FAQ\n\n##### How to crop a new area after zoom in or zoom out?\n\n> Just double click your mouse to enter crop mode.\n\n\n##### How to move the image after crop an area?\n\n> Just double click your mouse to enter move mode.\n\n\n##### How to fix aspect ratio in free ratio mode?\n\n> Just hold the `shift` key when you resize the crop box.\n\n\n##### How to crop a square area in free ratio mode?\n\n> Just hold the `shift` key when you crop on the image.\n\n\n\n#### Notes\n\n- The size of the cropper inherits from the size of the image's parent element (wrapper), so be sure to wrap the image with a **visible block element**.\n  > If you are using cropper in a modal, you should initialize the cropper after the modal shown completely. Otherwise, you will not get a correct cropper.\n\n- The outputted cropped data bases on the original image size, so you can use them to crop the image directly.\n\n- If you try to start cropper on a cross-origin image, please make sure that your browser supports HTML5 [CORS settings attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes), and your image server supports the `Access-Control-Allow-Origin` option (see the [HTTP access control (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)).\n\n\n#### Known issues\n\n- [Known iOS resource limits](https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/CreatingContentforSafarioniPhone/CreatingContentforSafarioniPhone.html): As iOS devices limit memory, the browser may crash when you are cropping a large image (iPhone camera resolution). To avoid this, you may resize the image first (preferably below 1024 pixels) before start a cropper.\n\n- Known image size increase: When export the cropped image on browser-side with the `HTMLCanvasElement.toDataURL` method, the size of the exported image may be greater than the original image's. This is because the type of the exported image is not the same as the original image's. So just pass the type the original image's as the first parameter to `toDataURL` to fix this. For example, if the original type is JPEG, then use `cropper.getCroppedCanvas().toDataURL('image/jpeg')` to export image.\n\n\n[⬆ back to top](#table-of-contents)\n\n\n\n## Options\n\nYou may set cropper options with `new Cropper(image, options)`.\nIf you want to change the global default options, You may use `Cropper.setDefaults(options)`.\n\n\n### viewMode\n\n- Type: `Number`\n- Default: `0`\n- Options:\n  - `0`: the crop box is just within the container\n  - `1`: the crop box should be within the canvas\n  - `2`: the canvas should not be within the container\n  - `3`: the container should be within the canvas\n\nDefine the view mode of the cropper.\n\n\n### dragMode\n\n- Type: `String`\n- Default: `'crop'`\n- Options:\n  - `'crop'`: create a new crop box\n  - `'move'`: move the canvas\n  - `'none'`: do nothing\n\nDefine the dragging mode of the cropper.\n\n\n### aspectRatio\n\n- Type: `Number`\n- Default: `NaN`\n\nSet the aspect ratio of the crop box. By default, the crop box is free ratio.\n\n\n### data\n\n- Type: `Object`\n- Default: `null`\n\nThe previous cropped data if you had stored, will be passed to `setData` method automatically when built.\n\n\n### preview\n\n- Type: `Element` or `String`\n- Default: `''`\n- An element or A valid selector for [Document.querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll)\n\nAdd extra elements (containers) for previewing.\n\n**Notes:**\n\n- The maximum width is the initial width of preview container.\n- The maximum height is the initial height of preview container.\n- If you set an `aspectRatio` option, be sure to set the same aspect ratio to the preview container.\n- If preview is not getting properly displayed, set `overflow: hidden` style to the preview container.\n\n\n### responsive\n\n- Type: `Boolean`\n- Default: `true`\n\nRe-render the cropper when resize the window.\n\n\n### restore\n\n- Type: `Boolean`\n- Default: `true`\n\nRestore the cropped area after resize the window.\n\n\n### checkCrossOrigin\n\n- Type: `Boolean`\n- Default: `true`\n\nCheck if the current image is a cross-origin image.\n\nIf it is, when clone the image, a `crossOrigin` attribute will be added to the cloned image element and a timestamp will be added to the `src` attribute to reload the source image to avoid browser cache error.\n\nBy adding `crossOrigin` attribute to image will stop adding timestamp to image url, and stop reload of image.\n\nIf the value of the image's `crossOrigin` attribute is `\"use-credentials\"`, then the `withCredentials` attribute will set to `true` when read the image data by XMLHttpRequest.\n\n\n### checkOrientation\n\n- Type: `Boolean`\n- Default: `true`\n\nCheck the current image's Exif Orientation information.\n\nMore exactly, read the Orientation value for rotating or flipping the image, and then override the Orientation value with `1` (the default value) to avoid some issues ([1](https://github.com/fengyuanchen/cropper/issues/120), [2](https://github.com/fengyuanchen/cropper/issues/509)) on iOS devices.\n\nRequires to set both the `rotatable` and `scalable` options to `true` at the same time.\n\n**Note:** Don't trust this all the time as some JPG images have incorrect (not standard) Orientation values.\n\n> Requires [Typed Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) support ([IE 10+](http://caniuse.com/typedarrays)).\n\n\n### modal\n\n- Type: `Boolean`\n- Default: `true`\n\nShow the black modal above the image and under the crop box.\n\n\n### guides\n\n- Type: `Boolean`\n- Default: `true`\n\nShow the dashed lines above the crop box.\n\n\n### center\n\n- Type: `Boolean`\n- Default: `true`\n\nShow the center indicator above the crop box.\n\n\n### highlight\n\n- Type: `Boolean`\n- Default: `true`\n\nShow the white modal above the crop box (highlight the crop box).\n\n\n### background\n\n- Type: `Boolean`\n- Default: `true`\n\nShow the grid background of the container.\n\n\n### autoCrop\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to crop the image automatically when initialize.\n\n\n### autoCropArea\n\n- Type: `Number`\n- Default: `0.8` (80% of the image)\n\nA number between 0 and 1. Define the automatic cropping area size (percentage).\n\n\n### movable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to move the image.\n\n\n### rotatable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to rotate the image.\n\n\n### scalable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to scale the image.\n\n\n### zoomable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to zoom the image.\n\n\n### zoomOnTouch\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to zoom the image by dragging touch.\n\n\n### zoomOnWheel\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to zoom the image by wheeling mouse.\n\n\n### wheelZoomRatio\n\n- Type: `Number`\n- Default: `0.1`\n\nDefine zoom ratio when zoom the image by wheeling mouse.\n\n\n### cropBoxMovable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to move the crop box by dragging.\n\n\n### cropBoxResizable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to resize the crop box by dragging.\n\n\n### toggleDragModeOnDblclick\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to toggle drag mode between \"crop\" and \"move\" when click twice on the cropper.\n\n\n### minContainerWidth\n\n- Type: `Number`\n- Default: `200`\n\nThe minimum width of the container.\n\n\n### minContainerHeight\n\n- Type: `Number`\n- Default: `100`\n\nThe minimum height of the container.\n\n\n### minCanvasWidth\n\n- Type: `Number`\n- Default: `0`\n\nThe minimum width of the canvas (image wrapper).\n\n\n### minCanvasHeight\n\n- Type: `Number`\n- Default: `0`\n\nThe minimum height of the canvas (image wrapper).\n\n\n### minCropBoxWidth\n\n- Type: `Number`\n- Default: `0`\n\nThe minimum width of the crop box.\n\n**Note:** This size is relative to the page, not the image.\n\n\n### minCropBoxHeight\n\n- Type: `Number`\n- Default: `0`\n\nThe minimum height of the crop box.\n\n**Note:** This size is relative to the page, not the image.\n\n\n### ready\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the \"ready\" event.\n\n\n### cropstart\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the \"cropstart\" event.\n\n\n### cropmove\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the \"cropmove\" event.\n\n\n### cropend\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the \"cropend\" event.\n\n\n### crop\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the \"crop\" event.\n\n\n### zoom\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the \"zoom\" event.\n\n\n[⬆ back to top](#table-of-contents)\n\n\n\n## Methods\n\nAs there is an **asynchronous** process when load the image, you **should call most of the methods after ready**, except \"setAspectRatio\", \"replace\" and \"destroy\".\n\n> If a method doesn't need to return any value, it will return the cropper instance (`this`) for chain composition.\n\n```js\nnew Cropper(image, {\n  ready: function () {\n    // this.cropper[method](argument1, , argument2, ..., argumentN);\n    this.cropper.move(1, -1);\n\n    // Allows chain composition\n    this.cropper.move(1, -1).rotate(45).scale(1, -1);\n  }\n});\n```\n\n\n### crop()\n\nShow the crop box manually.\n\n```js\nnew Cropper(image, {\n  autoCrop: false,\n  ready: function () {\n    // Do something here\n    // ...\n\n    // And then\n    this.cropper.crop();\n  }\n});\n```\n\n\n### reset()\n\nReset the image and crop box to their initial states.\n\n\n### clear()\n\nClear the crop box.\n\n\n### replace(url[, onlyColorChanged])\n\n- **url**:\n  - Type: `String`\n  - A new image url.\n\n- **onlyColorChanged** (optional):\n  - Type: `Boolean`\n  - If only change the color, not the size, then the cropper only need to change the srcs of all related images, not need to rebuild the cropper. This can be used for applying filters.\n  - If not present, its default value is `false`.\n\n\nReplace the image's src and rebuild the cropper.\n\n\n### enable()\n\nEnable (unfreeze) the cropper.\n\n\n### disable()\n\nDisable (freeze) the cropper.\n\n\n### destroy()\n\nDestroy the cropper and remove the instance from the image.\n\n\n### move(offsetX[, offsetY])\n\n- **offsetX**:\n  - Type: `Number`\n  - Moving size (px) in the horizontal direction.\n\n- **offsetY** (optional):\n  - Type: `Number`\n  - Moving size (px) in the vertical direction.\n  - If not present, its default value is `offsetX`.\n\nMove the canvas (image wrapper) with relative offsets.\n\n```js\ncropper.move(1);\ncropper.move(1, 0);\ncropper.move(0, -1);\n```\n\n\n### moveTo(x[, y])\n\n- **x**:\n  - Type: `Number`\n  - The `left` value of the canvas\n\n- **y** (optional):\n  - Type: `Number`\n  - The `top` value of the canvas\n  - If not present, its default value is `x`.\n\nMove the canvas (image wrapper) to an absolute point.\n\n\n### zoom(ratio)\n\n- **ratio**:\n  - Type: `Number`\n  - Zoom in: requires a positive number (ratio > 0)\n  - Zoom out: requires a negative number (ratio < 0)\n\nZoom the canvas (image wrapper) with a relative ratio.\n\n```js\ncropper.zoom(0.1);\ncropper.zoom(-0.1);\n```\n\n\n### zoomTo(ratio)\n\n- **ratio**:\n  - Type: `Number`\n\nZoom the canvas (image wrapper) to an absolute ratio.\n\n```js\ncropper.zoomTo(1); // 1:1 (canvasData.width === canvasData.naturalWidth)\n```\n\n\n### rotate(degree)\n\n- **degree**:\n  - Type: `Number`\n  - Rotate right: requires a positive number (degree > 0)\n  - Rotate left: requires a negative number (degree < 0)\n\nRotate the image with a relative degree.\n\n> Requires [CSS3 2D Transforms](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) support ([IE 9+](http://caniuse.com/transforms2d)).\n\n```js\ncropper.rotate(90);\ncropper.rotate(-90);\n```\n\n\n### rotateTo(degree)\n\n- **degree**:\n  - Type: `Number`\n\nRotate the image to an absolute degree.\n\n\n### scale(scaleX[, scaleY])\n\n- **scaleX**:\n  - Type: `Number`\n  - Default: `1`\n  - The scaling factor to apply on the abscissa of the image.\n  - When equal to `1` it does nothing.\n\n- **scaleY** (optional):\n  - Type: `Number`\n  - The scaling factor to apply on the ordinate of the image.\n  - If not present, its default value is `scaleX`.\n\nScale the image.\n\n> Requires [CSS3 2D Transforms](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) support ([IE 9+](http://caniuse.com/transforms2d)).\n\n```js\ncropper.scale(-1); // Flip both horizontal and vertical\ncropper.scale(-1, 1); // Flip horizontal\ncropper.scale(1, -1); // Flip vertical\n```\n\n\n### scaleX(scaleX)\n\n- **scaleX**:\n  - Type: `Number`\n  - Default: `1`\n  - The scaling factor to apply on the abscissa of the image.\n  - When equal to `1` it does nothing.\n\nScale the abscissa of the image.\n\n\n### scaleY(scaleY)\n\n- **scaleY**:\n  - Type: `Number`\n  - Default: `1`\n  - The scaling factor to apply on the ordinate of the image.\n  - When equal to `1` it does nothing.\n\nScale the ordinate of the image.\n\n\n### getData([rounded])\n\n- **rounded** (optional):\n  - Type: `Boolean`\n  - Default: `false`\n  - Set `true` to get rounded values.\n\n- (return value):\n  - Type: `Object`\n  - Properties:\n    - `x`: the offset left of the cropped area\n    - `y`: the offset top of the cropped area\n    - `width`: the width of the cropped area\n    - `height`: the height of the cropped area\n    - `rotate`: the rotated degrees of the image\n    - `scaleX`: the scaling factor to apply on the abscissa of the image\n    - `scaleY`: the scaling factor to apply on the ordinate of the image\n\nOutput the final cropped area position and size data (base on the natural size of the original image).\n\n> You can send the data to server-side to crop the image directly.\n\n![A schematic diagram for data's properties](docs/images/data.jpg)\n\n\n### setData(data)\n\n- **data**:\n  - Type: `Object`\n  - Properties: See the [`getData`](#getdatarounded) method.\n  - You may need to round the data properties before pass it in.\n\nChange the cropped area position and size with new data (base on the original image).\n\n> **Note:** This method only available when the `viewMode` option great than or equal to `1`.\n\n\n### getContainerData()\n\n- (return  value):\n  - Type: `Object`\n  - Properties:\n    - `width`: the current width of the container\n    - `height`: the current height of the container\n\nOutput the container size data.\n\n![A schematic diagram for cropper's layers](docs/images/layers.jpg)\n\n\n### getImageData()\n\n- (return  value):\n  - Type: `Object`\n  - Properties:\n    - `left`: the offset left of the image\n    - `top`: the offset top of the image\n    - `width`: the width of the image\n    - `height`: the height of the image\n    - `naturalWidth`: the natural width of the image\n    - `naturalHeight`: the natural height of the image\n    - `aspectRatio`: the aspect ratio of the image\n    - `rotate`: the rotated degrees of the image if rotated\n    - `scaleX`: the scaling factor to apply on the abscissa of the image if scaled\n    - `scaleY`: the scaling factor to apply on the ordinate of the image if scaled\n\nOutput the image position, size and other related data.\n\n\n### getCanvasData()\n\n- (return  value):\n  - Type: `Object`\n  - Properties:\n    - `left`: the offset left of the canvas\n    - `top`: the offset top of the canvas\n    - `width`: the width of the canvas\n    - `height`: the height of the canvas\n    - `naturalWidth`: the natural width of the canvas (read only)\n    - `naturalHeight`: the natural height of the canvas (read only)\n\nOutput the canvas (image wrapper) position and size data.\n\n```js\nvar imageData = cropper.getImageData();\nvar canvasData = cropper.getCanvasData();\n\nif (imageData.rotate % 180 === 0) {\n  console.log(canvasData.naturalWidth === imageData.naturalWidth); // true\n}\n```\n\n\n### setCanvasData(data)\n\n- **data**:\n  - Type: `Object`\n  - Properties:\n    - `left`: the new offset left of the canvas\n    - `top`: the new offset top of the canvas\n    - `width`: the new width of the canvas\n    - `height`: the new height of the canvas\n\nChange the canvas (image wrapper) position and size with new data.\n\n\n### getCropBoxData()\n\n- (return  value):\n  - Type: `Object`\n  - Properties:\n    - `left`: the offset left of the crop box\n    - `top`: the offset top of the crop box\n    - `width`: the width of the crop box\n    - `height`: the height of the crop box\n\nOutput the crop box position and size data.\n\n\n### setCropBoxData(data)\n\n- **data**:\n  - Type: `Object`\n  - Properties:\n    - `left`: the new offset left of the crop box\n    - `top`: the new offset top of the crop box\n    - `width`: the new width of the crop box\n    - `height`: the new height of the crop box\n\nChange the crop box position and size with new data.\n\n\n### getCroppedCanvas([options])\n\n- **options** (optional):\n  - Type: `Object`\n  - Properties:\n    - `width`: the destination width of the output canvas\n    - `height`: the destination height of the output canvas\n    - `fillColor`: a color to fill any alpha values in the output canvas\n  - Note: The aspect ratio of the output canvas will be fitted to aspect ratio of the crop box automatically.\n\n- (return  value):\n  - Type: `HTMLCanvasElement`\n  - A canvas drawn the cropped image.\n\n- Browser support:\n  - Basic image: requires [Canvas](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) support ([IE 9+](http://caniuse.com/canvas)).\n  - Rotated image: requires [CSS3 2D Transforms](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) support ([IE 9+](http://caniuse.com/transforms2d)).\n  - Cross-origin image: requires HTML5 [CORS settings attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) support ([IE 11+](http://caniuse.com/cors)).\n\nGet a canvas drawn the cropped image. If it is not cropped, then returns the whole canvas.\n\n> After then, you can display the canvas as an image directly, or use [HTMLCanvasElement.toDataURL](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL) to get a Data URL, or use [HTMLCanvasElement.toBlob](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob) to get a blob and upload it to server with [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) if the browser supports these APIs.\n\n```js\ncropper.getCroppedCanvas();\n\ncropper.getCroppedCanvas({\n  width: 160,\n  height: 90\n});\n\n// Upload cropped image to server if the browser supports `HTMLCanvasElement.toBlob`\ncropper.getCroppedCanvas().toBlob(function (blob) {\n  var formData = new FormData();\n\n  formData.append('croppedImage', blob);\n\n  // Use `jQuery.ajax` method\n  $.ajax('/path/to/upload', {\n    method: \"POST\",\n    data: formData,\n    processData: false,\n    contentType: false,\n    success: function () {\n      console.log('Upload success');\n    },\n    error: function () {\n      console.log('Upload error');\n    }\n  });\n});\n```\n\n### setAspectRatio(aspectRatio)\n\n- **aspectRatio**:\n  - Type: `Number`\n  - Requires a positive number.\n\nChange the aspect ratio of the crop box.\n\n\n### setDragMode([mode])\n\n- **mode** (optional):\n  - Type: `String`\n  - Default: `'none'`\n  - Options: `'none'`, `'crop'`, `'move'`\n\nChange the drag mode.\n\n**Tips:** You can toggle the \"crop\" and \"move\" mode by double click on the cropper.\n\n\n[⬆ back to top](#table-of-contents)\n\n\n\n## Events\n\n\n### ready\n\nThis event fires when the target image has been loaded and the cropper instance is ready for cropping.\n\n```js\nvar cropper;\n\nimage.addEventListener('ready', function () {\n  console.log(this.cropper === cropper);\n  // -> true\n});\n\ncropper = new Cropper(image);\n```\n\n\n### cropstart\n\n- **event.detail.originalEvent**:\n  - Type: `Event`\n  - Options: `mousedown`, `touchstart` and `pointerdown`\n\n- **event.detail.action**:\n  - Type: `String`\n  - Options:\n    - `'crop'`: create a new crop box\n    - `'move'`: move the canvas (image wrapper)\n    - `'zoom'`: zoom in / out the canvas (image wrapper) by touch.\n    - `'e'`: resize the east side of the crop box\n    - `'w'`: resize the west side of the crop box\n    - `'s'`: resize the south side of the crop box\n    - `'n'`: resize the north side of the crop box\n    - `'se'`: resize the southeast side of the crop box\n    - `'sw'`: resize the southwest side of the crop box\n    - `'ne'`: resize the northeast side of the crop box\n    - `'nw'`: resize the northwest side of the crop box\n    - `'all'`: move the crop box (all directions)\n\nThis event fires when the canvas (image wrapper) or the crop box starts to change.\n\n```js\nimage.addEventListener('cropstart', function (e) {\n  console.log(e.detail.originalEvent);\n  console.log(e.detail.action);\n});\n```\n\n\n### cropmove\n\n- **event.detail.originalEvent**:\n  - Type: `Event`\n  - Options: `mousemove`, `touchmove` and `pointermove`.\n\n- **event.detail.action**: the same as \"cropstart\".\n\nThis event fires when the canvas (image wrapper) or the crop box is changing.\n\n\n### cropend\n\n- **event.detail.originalEvent**:\n  - Type: `Event`\n  - Options: `mouseup`, `touchend`, `touchcancel`, `pointerup` and `pointercancel`.\n\n- **event.detail.action**: the same as \"cropstart\".\n\nThis event fires when the canvas (image wrapper) or the crop box stops to change.\n\n\n### crop\n\n- **event.detail.x**\n- **event.detail.y**\n- **event.detail.width**\n- **event.detail.height**\n- **event.detail.rotate**\n- **event.detail.scaleX**\n- **event.detail.scaleY**\n\n> About these properties, see the [`getData`](#getdatarounded) method.\n\nThis event fires when the canvas (image wrapper) or the crop box changed.\n\n\n### zoom\n\n- **event.detail.originalEvent**:\n  - Type: `Event`\n  - Options: `wheel`, `touchmove`.\n\n- **event.detail.oldRatio**:\n  - Type: `Number`\n  - The old (current) ratio of the canvas\n\n- **event.detail.ratio**:\n  - Type: `Number`\n  - The new (next) ratio of the canvas (`canvasData.width / canvasData.naturalWidth`)\n\nThis event fires when a cropper instance starts to zoom in or zoom out its canvas (image wrapper).\n\n```js\nimage.addEventListener('zoom', function (e) {\n\n  // Zoom in\n  if (e.detail.ratio > e.detail.oldRatio) {\n    e.preventDefault(); // Prevent zoom in\n  }\n\n  // Zoom out\n  // ...\n});\n```\n\n\n[⬆ back to top](#table-of-contents)\n\n\n\n## No conflict\n\nIf you have to use other cropper with the same namespace, just call the `Cropper.noConflict` static method to revert to it.\n\n```html\n<script src=\"other-cropper.js\"></script>\n<script src=\"cropper.js\"></script>\n<script>\n  Cropper.noConflict();\n  // Code that uses other `Cropper` can follow here.\n</script>\n```\n\n\n\n## Browser support\n\n- Chrome (latest)\n- Firefox (latest)\n- Safari (latest)\n- Opera (latest)\n- Edge (latest)\n- Internet Explorer 9+\n\n\n\n## Contributing\n\nPlease read through our [contributing guidelines](CONTRIBUTING.md).\n\n\n\n## Versioning\n\nMaintained under the [Semantic Versioning guidelines](http://semver.org/).\n\n\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) © [Fengyuan Chen](http://chenfengyuan.com)\n\n\n\n## Related projects\n\n- [react-cropper](https://github.com/roadmanfong/react-cropper) by @roadmanfong\n- [vue-cropperjs](https://github.com/Agontuk/vue-cropperjs) by @Agontuk\n\n\n[⬆ back to top](#table-of-contents)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fengyuanchen/cropperjs.git"
  },
  "scripts": {
    "build": "npm run build:css && npm run build:js",
    "build:css": "postcss -c postcss.config.json",
    "build:js": "rollup -c",
    "compress": "npm run compress:css && npm run compress:js",
    "compress:css": "postcss -u cssnano dist/cropper.css -o dist/cropper.min.css",
    "compress:js": "uglifyjs dist/cropper.js -o dist/cropper.min.js -c -m --comments /^!/",
    "lint": "eslint src/js",
    "postbuild": "npm run compress && node build",
    "prebuild": "npm run lint && npm test",
    "start": "npm-run-all --parallel watch:*",
    "test": "node-qunit-phantomjs test/index.html",
    "watch:css": "postcss -c postcss.config.json -w",
    "watch:js": "rollup -c -w -m"
  },
  "version": "1.0.0-rc.1"
}
