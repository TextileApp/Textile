{
  "_args": [
    [
      {
        "raw": "jstransform@~3.0.0",
        "scope": null,
        "escapedName": "jstransform",
        "name": "jstransform",
        "rawSpec": "~3.0.0",
        "spec": ">=3.0.0 <3.1.0",
        "type": "range"
      },
      "/Users/Matthew/Textile/node_modules/es3ify"
    ]
  ],
  "_from": "jstransform@>=3.0.0 <3.1.0",
  "_id": "jstransform@3.0.0",
  "_inCache": true,
  "_location": "/jstransform",
  "_npmUser": {
    "name": "jeffmo",
    "email": "jeff@anafx.com"
  },
  "_npmVersion": "1.2.32",
  "_phantomChildren": {
    "amdefine": "1.0.1"
  },
  "_requested": {
    "raw": "jstransform@~3.0.0",
    "scope": null,
    "escapedName": "jstransform",
    "name": "jstransform",
    "rawSpec": "~3.0.0",
    "spec": ">=3.0.0 <3.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/es3ify"
  ],
  "_resolved": "https://registry.npmjs.org/jstransform/-/jstransform-3.0.0.tgz",
  "_shasum": "a2591ab6cee8d97bf3be830dbfa2313b87cd640b",
  "_shrinkwrap": null,
  "_spec": "jstransform@~3.0.0",
  "_where": "/Users/Matthew/Textile/node_modules/es3ify",
  "bugs": {
    "url": "https://github.com/facebook/jstransform/issues"
  },
  "contributors": [
    {
      "name": "Jeff Morrison",
      "email": "jeffmo@fb.com"
    }
  ],
  "dependencies": {
    "base62": "0.1.1",
    "esprima-fb": "~3001.1.0-dev-harmony-fb",
    "source-map": "0.1.31"
  },
  "description": "A simple AST visitor-based JS transformer",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "a2591ab6cee8d97bf3be830dbfa2313b87cd640b",
    "tarball": "https://registry.npmjs.org/jstransform/-/jstransform-3.0.0.tgz"
  },
  "engines": {
    "node": ">=0.8.8"
  },
  "homepage": "https://github.com/facebook/jstransform#readme",
  "keywords": [
    "transformer",
    "compiler",
    "syntax",
    "visitor"
  ],
  "licenses": [
    {
      "type": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "main": "src/jstransform",
  "maintainers": [
    {
      "name": "jeffmo",
      "email": "jeff@anafx.com"
    },
    {
      "name": "zpao",
      "email": "paul@oshannessy.com"
    }
  ],
  "name": "jstransform",
  "optionalDependencies": {},
  "readme": "# JSTransform\n\nA simple utility for pluggable JS syntax transforms using the esprima parser.\n\n* Makes it simple to write and plug-in syntax transformations\n* Makes it simple to coalesce multiple syntax transformations in a single pass of the AST\n* Gives complete control over the formatting of the output on a per-transformation basis\n* Supports source map generation\n* Comes pre-bundled with a small set of (optional) ES6 -> ES5 transforms\n\n## Examples\nUsing a pre-bundled or existing transform:\n```js\n/**\n * Reads a source file that may (or may not) contain ES6 classes, transforms it\n * to ES5 compatible code using the pre-bundled ES6 class visitors, and prints \n * out the result.\n */\nvar es6ClassVisitors = require('jstransform/visitors/es6-class-visitors').visitorList;\nvar fs = require('fs');\nvar jstransform = require('jstransform');\n\nvar originalFileContents = fs.readFileSync('path/to/original/file.js', 'utf-8');\n\nvar transformedFileData = jstransform.transform(\n  es6ClassVisitors,\n  originalFileContents\n);\n\nconsole.log(transformedFileData.code);\n```\n\nUsing multiple pre-bundled or existing transforms at once:\n```js\n/**\n * Reads a source file that may (or may not) contain ES6 classes *or* arrow\n * functions, transforms them to ES5 compatible code using the pre-bundled ES6 \n * visitors, and prints out the result.\n */\nvar es6ArrowFuncVisitors = require('jstransform/visitors/es6-arrow-function-visitors').visitorList;\nvar es6ClassVisitors = require('jstransform/visitors/es6-class-visitors').visitorList;\nvar jstransform = require('jstransform');\n\n// Normally you'd read this from the filesystem, but I'll just use a string here\n// to simplify the example.\nvar originalFileContents = \"var a = (param1) => param1; class FooClass {}\";\n\nvar transformedFileData = jstransform.transform(\n  es6ClassVisitors.concat(es6ArrowFuncVisitors),\n  originalFileContents\n);\n\n// var a = function(param1)  {return param1;}; function FooClass(){\"use strict\";}\nconsole.log(transformedFileData.code);\n```\n\nWriting a simple custom transform:\n```js\n/**\n * Creates a custom transformation visitor that prefixes all calls to the\n * `eval()` function with a call to `alert()` saying how much of a clown you are\n * for using eval.\n */\nvar jstransform = require('jstransform');\nvar Syntax = require('esprima-fb').Syntax;\nvar utils = require('jstransform/src/utils');\n\nfunction visitEvalCallExpressions(traverse, node, path, state) {\n  // Appends an alert() call to the output buffer *before* the visited node\n  // (in this case the eval call) is appended to the output buffer\n  utils.append('alert(\"...eval?...really?...\");', state);\n\n  // Now we copy the eval expression to the output buffer from the original\n  // source\n  utils.catchup(node.range[1], state);\n}\nvisitEvalCallExpressions.test = function(node, path, state) {\n  return node.type === Syntax.CallExpression\n         && node.callee.type === Syntax.Identifier\n         && node.callee.name === 'eval';\n};\n\n// Normally you'd read this from the filesystem, but I'll just use a string here\n// to simplify the example.\nvar originalFileContents = \"eval('foo');\";\n\nvar transformedFileData = jstransform.transform(\n  [visitEvalCallExpressions], // Multiple visitors may be applied at once, so an\n                              // array is always expected for the first argument\n  originalFileContents\n);\n\n// alert(\"...eval?...really?...\");eval('foo');\nconsole.log(transformedFileData.code);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/facebook/jstransform.git"
  },
  "version": "3.0.0"
}
