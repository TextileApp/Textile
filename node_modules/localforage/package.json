{
  "_args": [
    [
      {
        "raw": "localforage@^1.4.2",
        "scope": null,
        "escapedName": "localforage",
        "name": "localforage",
        "rawSpec": "^1.4.2",
        "spec": ">=1.4.2 <2.0.0",
        "type": "range"
      },
      "/Users/Matthew/Textile/node_modules/@ionic/storage"
    ]
  ],
  "_from": "localforage@>=1.4.2 <2.0.0",
  "_id": "localforage@1.5.0",
  "_inCache": true,
  "_location": "/localforage",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/localforage-1.5.0.tgz_1487432373759_0.23809713358059525"
  },
  "_npmUser": {
    "name": "tofumatt",
    "email": "matt@lonelyvegan.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "localforage@^1.4.2",
    "scope": null,
    "escapedName": "localforage",
    "name": "localforage",
    "rawSpec": "^1.4.2",
    "spec": ">=1.4.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ionic/storage",
    "/localforage-cordovasqlitedriver"
  ],
  "_resolved": "https://registry.npmjs.org/localforage/-/localforage-1.5.0.tgz",
  "_shasum": "6b994e19b56611fa85df3992df397ac4ab66e815",
  "_shrinkwrap": null,
  "_spec": "localforage@^1.4.2",
  "_where": "/Users/Matthew/Textile/node_modules/@ionic/storage",
  "author": {
    "name": "Mozilla"
  },
  "bugs": {
    "url": "http://github.com/localForage/localForage/issues"
  },
  "dependencies": {
    "lie": "3.0.2"
  },
  "description": "Offline storage, improved.",
  "devDependencies": {
    "babel-core": "^6.5.1",
    "babel-loader": "^6.2.2",
    "babel-plugin-add-module-exports": "^0.1.2",
    "babel-plugin-transform-es2015-modules-umd": "^6.5.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-es2015-loose": "^7.0.0",
    "babelify": "^7.2.0",
    "browserify-derequire": "^0.9.4",
    "bundle-collapser": "^1.2.1",
    "cors": "^2.3.1",
    "grunt": "^0.4.2",
    "grunt-babel": "^6.0.0",
    "grunt-browserify": "^3.8.0",
    "grunt-contrib-concat": "^0.3.0",
    "grunt-contrib-connect": "^0.8.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-uglify": "^0.4.0",
    "grunt-contrib-watch": "^0.5.0",
    "grunt-es3-safe-recast": "^0.1.0",
    "grunt-jscs": "^1.5.0",
    "grunt-mocha": "^0.4.10",
    "grunt-rollup": "^0.6.2",
    "grunt-run": "^0.5.2",
    "grunt-saucelabs": "^5.1.2",
    "grunt-ts": "^6.0.0-beta.11",
    "grunt-webpack": "^1.0.11",
    "load-grunt-tasks": "^0.4.0",
    "mocha": "^1.18.2",
    "phantomjs": "^1.9.7-12",
    "rollupify": "^0.1.0",
    "script-loader": "^0.6.1",
    "typescript": "^2.0.3",
    "uglify-js": "^2.3.x",
    "webpack": "^1.12.13",
    "webpack-dev-server": "^1.10.1"
  },
  "directories": {},
  "dist": {
    "shasum": "6b994e19b56611fa85df3992df397ac4ab66e815",
    "tarball": "https://registry.npmjs.org/localforage/-/localforage-1.5.0.tgz"
  },
  "gitHead": "e09ee3966862d50d101b6e2b442e4ad53b58663c",
  "homepage": "https://github.com/localForage/localForage",
  "keywords": [
    "indexeddb",
    "localstorage",
    "storage",
    "websql"
  ],
  "license": "Apache-2.0",
  "main": "dist/localforage.js",
  "maintainers": [
    {
      "name": "tofumatt",
      "email": "matt@lonelyvegan.com"
    }
  ],
  "name": "localforage",
  "optionalDependencies": {},
  "readme": "# localForage\n[![Build Status](https://travis-ci.org/localForage/localForage.svg?branch=master)](http://travis-ci.org/localForage/localForage)\n[![NPM version](https://badge.fury.io/js/localforage.svg)](http://badge.fury.io/js/localforage)\n[![Dependency Status](https://img.shields.io/david/localForage/localForage.svg)](https://david-dm.org/localForage/localForage)\n[![npm](https://img.shields.io/npm/dm/localforage.svg?maxAge=2592000)]()\n\nlocalForage is a fast and simple storage library for JavaScript. localForage\nimproves the offline experience of your web app by using asynchronous storage\n(IndexedDB or WebSQL) with a simple, `localStorage`-like API.\n\nlocalForage uses localStorage in browsers with no IndexedDB or\nWebSQL support. See [the wiki for detailed compatibility info][supported browsers].\n\nTo use localForage, just drop a single JavaScript file into your page:\n\n```html\n<script src=\"localforage.js\"></script>\n<script>localforage.getItem('something', myCallback);</script>\n```\n\nDownload the [latest localForage from GitHub](https://github.com/localForage/localForage/releases/latest), or install with\n[npm](https://www.npmjs.com/):\n\n```bash\nnpm install localforage\n```\n\nor [bower](http://bower.io):\n\n```bash\nbower install localforage\n```\n\nlocalForage is compatible with [browserify](http://browserify.org/).\n\n[supported browsers]: https://github.com/localForage/localForage/wiki/Supported-Browsers-Platforms\n\n## Support\n\nLost? Need help? Try the\n[localForage API documentation](https://localforage.github.io/localForage).\n\nIf you're stuck using the library, running the tests, or want to contribute\nto localForage, you can visit\n[irc.freenode.net](https://freenode.net/) and head to the `#localforage`\nchannel to ask questions about localForage.\n\nThe best person to ask about localForage is [**tofumatt**][tofumatt], who\nis usually online from 8am-8pm GMT (London Time).\n\n[tofumatt]: http://tofumatt.com/\n\n## Safari 10.1+\n\nSince Safari 10.1 we default to IndexedDB; see the [CHANGELOG](https://github.com/localForage/localForage/blob/master/CHANGELOG.md) for more info.\n\n# How to use localForage\n\n## Callbacks vs Promises\n\nBecause localForage uses async storage, it has an async API.\nIt's otherwise exactly the same as the\n[localStorage API](https://hacks.mozilla.org/2009/06/localstorage/).\n\nlocalForage has a dual API that allows you to either use Node-style callbacks\nor [Promises](https://www.promisejs.org/). If you are unsure which one is right for you, it's recommended to use Promises.\n\nHere's an example of the Node-style callback form:\n\n```js\nlocalforage.setItem('key', 'value', function (err) {\n  // if err is non-null, we got an error\n  localforage.getItem('key', function (err, value) {\n    // if err is non-null, we got an error. otherwise, value is the value\n  });\n});\n```\n\nAnd the Promise form:\n\n```js\nlocalforage.setItem('key', 'value').then(function () {\n  return localforage.getItem('key');\n}).then(function (value) {\n  // we got our value\n}).catch(function (err) {\n  // we got an error\n});\n```\n\nFor more examples, please visit [the API docs](https://localforage.github.io/localForage).\n\n## Storing Blobs, TypedArrays, and other JS objects\n\nYou can store any type in localForage; you aren't limited to strings like in\nlocalStorage. Even if localStorage is your storage backend, localForage\nautomatically does `JSON.parse()` and `JSON.stringify()` when getting/setting\nvalues.\n\nlocalForage supports storing all native JS objects that can be serialized to\nJSON, as well as ArrayBuffers, Blobs, and TypedArrays. Check the\n[API docs][api] for a full list of types supported by localForage.\n\nAll types are supported in every storage backend, though storage limits in\nlocalStorage make storing many large Blobs impossible.\n\n[api]: https://localforage.github.io/localForage/#setitem\n\n## Configuration\n\nYou can set database information with the `config()` method.\nAvailable options are `driver`, `name`, `storeName`, `version`, `size`, and\n`description`.\n\nExample:\n```javascript\nlocalforage.config({\n    driver      : localforage.WEBSQL, // Force WebSQL; same as using setDriver()\n    name        : 'myApp',\n    version     : 1.0,\n    size        : 4980736, // Size of database, in bytes. WebSQL-only for now.\n    storeName   : 'keyvaluepairs', // Should be alphanumeric, with underscores.\n    description : 'some description'\n});\n```\n\n**Note:** you must call `config()` _before_ you interact with your data. This\nmeans calling `config()` before using `getItem()`, `setItem()`, `removeItem()`,\n`clear()`, `key()`, `keys()` or `length()`.\n\n## Multiple instances\n\nYou can create multiple instances of localForage that point to different stores\nusing `createInstance`. All the configuration options used by\n[`config`](#configuration) are supported.\n\n``` javascript\nvar store = localforage.createInstance({\n  name: \"nameHere\"\n});\n\nvar otherStore = localforage.createInstance({\n  name: \"otherName\"\n});\n\n// Setting the key on one of these doesn't affect the other.\nstore.setItem(\"key\", \"value\");\notherStore.setItem(\"key\", \"value2\");\n```\n\n## RequireJS\n\nYou can use localForage with [RequireJS](http://requirejs.org/):\n\n```javascript\ndefine(['localforage'], function(localforage) {\n    // As a callback:\n    localforage.setItem('mykey', 'myvalue', console.log);\n\n    // With a Promise:\n    localforage.setItem('mykey', 'myvalue').then(console.log);\n});\n```\n\n## Browserify and Webpack\n\nlocalForage 1.3+ works with both Browserify and Webpack. If you're using an\nearlier version of localForage and are having issues with Browserify or\nWebpack, please upgrade to 1.3.0 or above.\n\nWebpack will emit a warning about using a prebuilt javascript file which is fine. If you want to remove the warning you should exclude `localforage` from being parsed by webpack using the following conf :\n\n```javascript\nmodule: {\n  noParse: /node_modules\\/localforage\\/dist\\/localforage.js/,\n  loaders: [...],\n```\n\n## TypeScript\n\nIf you have the [`allowSyntheticDefaultImports` compiler option](https://www.typescriptlang.org/docs/handbook/compiler-options.html) set to `true` in your [tsconfig.json](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) (supported in TypeScript v1.8+), you should use:\n\n```javascript\nimport localForage from \"localforage\";\n```\n\nOtherwise you should use one of the following:\n\n```javascript\nimport * as localForage from \"localforage\";\n// or, in case that the typescript version that you are using\n// doesn't support ES6 style imports for UMD modules like localForage\nimport localForage = require(\"localforage\");\n```\n\n## Framework Support\n\nIf you use a framework listed, there's a localForage storage driver for the\nmodels in your framework so you can store data offline with localForage. We\nhave drivers for the following frameworks:\n\n* [AngularJS](https://github.com/ocombe/angular-localForage)\n* [Backbone](https://github.com/localForage/localForage-backbone)\n* [Ember](https://github.com/genkgo/ember-localforage-adapter)\n\nIf you have a driver you'd like listed, please\n[open an issue](https://github.com/localForage/localForage/issues/new) to have it\nadded to this list.\n\n## Custom Drivers\n\nYou can create your own driver if you want; see the\n[`defineDriver`](https://localforage.github.io/localForage/#definedriver) API docs.\n\nThere is a [list of custom drivers on the wiki][custom drivers].\n\n[custom drivers]: https://github.com/localForage/localForage/wiki/Custom-Drivers\n\n# Working on localForage\n\nYou'll need [node/npm](http://nodejs.org/) and\n[bower](http://bower.io/#installing-bower).\n\nTo work on localForage, you should start by\n[forking it](https://github.com/localForage/localForage/fork) and installing its\ndependencies. Replace `USERNAME` with your GitHub username and run the\nfollowing:\n\n```bash\n# Install bower globally if you don't have it:\nnpm install -g bower\n\n# Replace USERNAME with your GitHub username:\ngit clone git@github.com:USERNAME/localForage.git\ncd localForage\nnpm install\nbower install\n```\n\nOmitting the bower dependencies will cause the tests to fail!\n\n## Running Tests\n\nYou need PhantomJS installed to run local tests. Run `npm test` (or,\ndirectly: `grunt test`). Your code must also pass the\n[linter](http://jshint.com/).\n\nlocalForage is designed to run in the browser, so the tests explicitly require\na browser environment. Local tests are run on a headless WebKit (using\n[PhantomJS](http://phantomjs.org)).\n\nWhen you submit a pull request, tests will be run against all browsers that\nlocalForage supports on Travis CI using [Sauce Labs](https://saucelabs.com/).\n\n# License\n\nThis program is free software; it is distributed under an\n[Apache License](https://github.com/localForage/localForage/blob/master/LICENSE).\n\n---\n\nCopyright (c) 2013-2016 [Mozilla](https://mozilla.org)\n([Contributors](https://github.com/localForage/localForage/graphs/contributors)).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/localForage/localForage.git"
  },
  "scripts": {
    "publish-docs": "node -e \"require('grunt').cli()\" null copy build-rules-html publish-rules",
    "test": "node -e \"require('grunt').cli()\" null test"
  },
  "typings": "typings/localforage.d.ts",
  "version": "1.5.0"
}
