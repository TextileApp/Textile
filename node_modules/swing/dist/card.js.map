{"version":3,"sources":["card.js"],"names":[],"mappings":"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","file":"card.js","sourcesContent":["import _ from 'lodash';\nimport Sister from 'sister';\nimport Hammer from 'hammerjs';\nimport rebound from 'rebound';\nimport vendorPrefix from 'vendor-prefix';\nimport raf from 'raf';\nimport {\n    elementChildren,\n    isTouchDevice\n} from './util';\n\n/**\n * @param {Stack} stack\n * @param {HTMLElement} targetElement\n * @return {Object} An instance of Card.\n */\nconst Card = (stack, targetElement) => {\n    let card,\n        config,\n        currentX,\n        currentY,\n        doMove,\n        eventEmitter,\n        isDraging,\n        lastThrow,\n        lastTranslate,\n        lastX,\n        lastY,\n        mc,\n        onSpringUpdate,\n        springSystem,\n        springThrowIn,\n        springThrowOut,\n        throwOutDistance,\n        throwWhere;\n\n    const construct = () => {\n        card = {};\n        config = Card.makeConfig(stack.getConfig());\n        eventEmitter = Sister();\n        springSystem = stack.getSpringSystem();\n        springThrowIn = springSystem.createSpring(250, 10);\n        springThrowOut = springSystem.createSpring(500, 20);\n        lastThrow = {};\n        lastTranslate = {\n            x: 0,\n            y: 0\n        };\n\n        springThrowIn.setRestSpeedThreshold(0.05);\n        springThrowIn.setRestDisplacementThreshold(0.05);\n\n        springThrowOut.setRestSpeedThreshold(0.05);\n        springThrowOut.setRestDisplacementThreshold(0.05);\n\n        throwOutDistance = config.throwOutDistance(config.minThrowOutDistance, config.maxThrowOutDistance);\n\n        mc = new Hammer.Manager(targetElement, {\n            recognizers: [\n                [\n                    Hammer.Pan,\n                    {\n                        threshold: 2\n                    }\n                ]\n            ]\n        });\n\n        Card.appendToParent(targetElement);\n\n        eventEmitter.on('panstart', () => {\n            Card.appendToParent(targetElement);\n\n            eventEmitter.trigger('dragstart', {\n                target: targetElement\n            });\n\n            currentX = 0;\n            currentY = 0;\n\n            isDraging = true;\n\n            (function animation () {\n                if (isDraging) {\n                    doMove();\n\n                    raf(animation);\n                }\n            })();\n        });\n\n        eventEmitter.on('panmove', (e) => {\n            currentX = e.deltaX;\n            currentY = e.deltaY;\n        });\n\n        eventEmitter.on('panend', (e) => {\n            isDraging = false;\n\n            const x = lastTranslate.x + e.deltaX;\n            const y = lastTranslate.y + e.deltaY;\n\n            if (config.isThrowOut(x, targetElement, config.throwOutConfidence(x, targetElement))) {\n                card.throwOut(x, y);\n            } else {\n                card.throwIn(x, y);\n            }\n\n            eventEmitter.trigger('dragend', {\n                target: targetElement\n            });\n        });\n\n        // \"mousedown\" event fires late on touch enabled devices, thus listening\n        // to the touchstart event for touch enabled devices and mousedown otherwise.\n        if (isTouchDevice()) {\n            targetElement.addEventListener('touchstart', () => {\n                eventEmitter.trigger('panstart');\n            });\n\n            // Disable scrolling while dragging the element on the touch enabled devices.\n            // @see http://stackoverflow.com/a/12090055/368691\n            (() => {\n                let dragging;\n\n                targetElement.addEventListener('touchstart', () => {\n                    dragging = true;\n                });\n\n                targetElement.addEventListener('touchend', () => {\n                    dragging = false;\n                });\n\n                global.addEventListener('touchmove', (e) => {\n                    if (dragging) {\n                        e.preventDefault();\n                    }\n                });\n            })();\n        } else {\n            targetElement.addEventListener('mousedown', () => {\n                eventEmitter.trigger('panstart');\n            });\n        }\n\n        mc.on('panmove', (e) => {\n            eventEmitter.trigger('panmove', e);\n        });\n\n        mc.on('panend', (e) => {\n            eventEmitter.trigger('panend', e);\n        });\n\n        springThrowIn.addListener({\n            onSpringUpdate: (spring) => {\n                const value = spring.getCurrentValue();\n                const x = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromX, 0);\n                const y = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromY, 0);\n\n                onSpringUpdate(x, y);\n            },\n            onSpringAtRest: () => {\n                eventEmitter.trigger('throwinend', {\n                    target: targetElement\n                });\n            }\n        });\n\n        springThrowOut.addListener({\n            onSpringUpdate: (spring) => {\n                const value = spring.getCurrentValue();\n                const x = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromX, throwOutDistance * lastThrow.direction);\n                const y = lastThrow.fromY;\n\n                onSpringUpdate(x, y);\n            },\n            onSpringAtRest: () => {\n                eventEmitter.trigger('throwoutend', {\n                    target: targetElement\n                });\n            }\n        });\n\n        /**\n         * Transforms card position based on the current environment variables.\n         *\n         * @return {undefined}\n         */\n        doMove = () => {\n            let r,\n                x,\n                y;\n\n            if (currentX === lastX && currentY === lastY) {\n                return;\n            }\n\n            lastX = currentX;\n            lastY = currentY;\n\n            x = lastTranslate.x + currentX;\n            y = lastTranslate.y + currentY;\n            r = config.rotation(x, y, targetElement, config.maxRotation);\n\n            config.transform(targetElement, x, y, r);\n\n            eventEmitter.trigger('dragmove', {\n                target: targetElement,\n                throwOutConfidence: config.throwOutConfidence(x, targetElement),\n                throwDirection: x < 0 ? Card.DIRECTION_LEFT : Card.DIRECTION_RIGHT,\n                offset: x\n            });\n        };\n\n        /**\n         * Invoked every time the physics solver updates the Spring's value.\n         *\n         * @param {Number} x\n         * @param {Number} y\n         * @return {undefined}\n         */\n        onSpringUpdate = (x, y) => {\n            let r;\n\n            r = config.rotation(x, y, targetElement, config.maxRotation);\n\n            lastTranslate.x = x || 0;\n            lastTranslate.y = y || 0;\n\n            Card.transform(targetElement, x, y, r);\n        };\n\n        /**\n         * @param {Card.THROW_IN|Card.THROW_OUT} where\n         * @param {Number} fromX\n         * @param {Number} fromY\n         * @return {undefined}\n         */\n        throwWhere = (where, fromX, fromY) => {\n            lastThrow.fromX = fromX;\n            lastThrow.fromY = fromY;\n            lastThrow.direction = lastThrow.fromX < 0 ? Card.DIRECTION_LEFT : Card.DIRECTION_RIGHT;\n\n            if (where === Card.THROW_IN) {\n                springThrowIn.setCurrentValue(0).setAtRest().setEndValue(1);\n\n                eventEmitter.trigger('throwin', {\n                    target: targetElement,\n                    throwDirection: lastThrow.direction\n                });\n            } else if (where === Card.THROW_OUT) {\n                springThrowOut.setCurrentValue(0).setAtRest().setVelocity(100).setEndValue(1);\n\n                eventEmitter.trigger('throwout', {\n                    target: targetElement,\n                    throwDirection: lastThrow.direction\n                });\n\n                if (lastThrow.direction === Card.DIRECTION_LEFT) {\n                    eventEmitter.trigger('throwoutleft', {\n                        target: targetElement,\n                        throwDirection: lastThrow.direction\n                    });\n                } else {\n                    eventEmitter.trigger('throwoutright', {\n                        target: targetElement,\n                        throwDirection: lastThrow.direction\n                    });\n                }\n            } else {\n                throw new Error('Invalid throw event.');\n            }\n        };\n    };\n\n    construct();\n\n    /**\n     * Alias\n     */\n    card.on = eventEmitter.on;\n    card.trigger = eventEmitter.trigger;\n\n    /**\n     * Throws a card into the stack from an arbitrary position.\n     *\n     * @param {Number} fromX\n     * @param {Number} fromY\n     * @return {undefined}\n     */\n    card.throwIn = (fromX, fromY) => {\n        throwWhere(Card.THROW_IN, fromX, fromY);\n    };\n\n    /**\n     * Throws a card out of the stack in the direction away from the original offset.\n     *\n     * @param {Number} fromX\n     * @param {Number} fromY\n     * @return {undefined}\n     */\n    card.throwOut = (fromX, fromY) => {\n        throwWhere(Card.THROW_OUT, fromX, fromY);\n    };\n\n    /**\n     * Unbinds all Hammer.Manager events.\n     * Removes the listeners from the physics simulation.\n     *\n     * @return {undefined}\n     */\n    card.destroy = () => {\n        mc.destroy();\n        springThrowIn.destroy();\n        springThrowOut.destroy();\n\n        stack.destroyCard(card);\n    };\n\n    return card;\n};\n\n/**\n * Creates a configuration object.\n *\n * @param {Object} config\n * @return {Object}\n */\nCard.makeConfig = (config = {}) => {\n    const defaultConfig = {\n        isThrowOut: Card.isThrowOut,\n        throwOutConfidence: Card.throwOutConfidence,\n        throwOutDistance: Card.throwOutDistance,\n        minThrowOutDistance: 400,\n        maxThrowOutDistance: 500,\n        rotation: Card.rotation,\n        maxRotation: 20,\n        transform: Card.transform\n    };\n\n    return _.assign({}, defaultConfig, config);\n};\n\n/**\n * Uses CSS transform to translate element position and rotation.\n *\n * Invoked in the event of `dragmove` and every time the physics solver is triggered.\n *\n * @param {HTMLElement} element\n * @param {Number} x Horizontal offset from the startDrag.\n * @param {Number} y Vertical offset from the startDrag.\n * @param {Number} r\n * @return {undefined}\n */\nCard.transform = (element, x, y, r) => {\n    element.style[vendorPrefix('transform')] = `translate3d(0, 0, 0) translate(${x}px, ${y}px) rotate(${r}deg)`;\n};\n\n/**\n * Append element to the parentNode.\n *\n * This makes the element first among the siblings. The reason for using\n * this as opposed to zIndex is to allow CSS selector :nth-child.\n *\n * Invoked in the event of mousedown.\n * Invoked when card is added to the stack.\n *\n * @param {HTMLElement} element The target element.\n * @return {undefined}\n */\nCard.appendToParent = (element) => {\n    const parentNode = element.parentNode;\n    const siblings = elementChildren(parentNode);\n    const targetIndex = siblings.indexOf(element);\n\n    if (targetIndex + 1 !== siblings.length) {\n        parentNode.removeChild(element);\n        parentNode.appendChild(element);\n    }\n};\n\n/**\n * Returns a value between 0 and 1 indicating the completeness of the throw out condition.\n *\n * Ration of the absolute distance from the original card position and element width.\n *\n * @param {Number} offset Distance from the dragStart.\n * @param {HTMLElement} element Element.\n * @return {Number}\n */\nCard.throwOutConfidence = (offset, element) => {\n    return Math.min(Math.abs(offset) / element.offsetWidth, 1);\n};\n\n/**\n * Determines if element is being thrown out of the stack.\n *\n * Element is considered to be thrown out when throwOutConfidence is equal to 1.\n *\n * @param {Number} offset Distance from the dragStart.\n * @param {HTMLElement} element Element.\n * @param {Number} throwOutConfidence config.throwOutConfidence\n * @return {Boolean}\n */\nCard.isThrowOut = (offset, element, throwOutConfidence) => {\n    return throwOutConfidence === 1;\n};\n\n/**\n * Calculates a distances at which the card is thrown out of the stack.\n *\n * @param {Number} min\n * @param {Number} max\n * @return {Number}\n */\nCard.throwOutDistance = (min, max) => {\n    return _.random(min, max);\n};\n\n/**\n * Calculates rotation based on the element x and y offset, element width and maxRotation variables.\n *\n * @param {Number} x Horizontal offset from the startDrag.\n * @param {Number} y Vertical offset from the startDrag.\n * @param {HTMLElement} element Element.\n * @param {Number} maxRotation\n * @return {Number} Rotation angle expressed in degrees.\n */\nCard.rotation = (x, y, element, maxRotation) => {\n    const horizontalOffset = Math.min(Math.max(x / element.offsetWidth, -1), 1);\n    const verticalOffset = (y > 0 ? 1 : -1) * Math.min(Math.abs(y) / 100, 1);\n    const rotation = horizontalOffset * verticalOffset * maxRotation;\n\n    return rotation;\n};\n\nCard.DIRECTION_LEFT = -1;\nCard.DIRECTION_RIGHT = 1;\n\nCard.THROW_IN = 'in';\nCard.THROW_OUT = 'out';\n\nexport default Card;\n"],"sourceRoot":"/source/"}