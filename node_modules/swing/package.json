{
  "_args": [
    [
      {
        "raw": "swing@^3.0.3",
        "scope": null,
        "escapedName": "swing",
        "name": "swing",
        "rawSpec": "^3.0.3",
        "spec": ">=3.0.3 <4.0.0",
        "type": "range"
      },
      "/Users/Matthew/Textile/node_modules/angular2-swing"
    ]
  ],
  "_from": "swing@>=3.0.3 <4.0.0",
  "_id": "swing@3.0.3",
  "_inCache": true,
  "_location": "/swing",
  "_nodeVersion": "5.8.0",
  "_npmOperationalInternal": {
    "host": "packages-13-west.internal.npmjs.com",
    "tmp": "tmp/swing-3.0.3.tgz_1457808598201_0.07674384023994207"
  },
  "_npmUser": {
    "name": "gajus",
    "email": "gajus@gajus.com"
  },
  "_npmVersion": "3.8.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "swing@^3.0.3",
    "scope": null,
    "escapedName": "swing",
    "name": "swing",
    "rawSpec": "^3.0.3",
    "spec": ">=3.0.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/angular2-swing"
  ],
  "_resolved": "https://registry.npmjs.org/swing/-/swing-3.0.3.tgz",
  "_shasum": "6d421c54f66ac74eff8489ebd7ab693d43b14e98",
  "_shrinkwrap": null,
  "_spec": "swing@^3.0.3",
  "_where": "/Users/Matthew/Textile/node_modules/angular2-swing",
  "author": {
    "name": "Gajus Kuizinas",
    "email": "gajus@gajus.com",
    "url": "http://gajus.com"
  },
  "bugs": {
    "url": "https://github.com/gajus/swing/issues"
  },
  "dependencies": {
    "hammerjs": "^2.0.4",
    "lodash": "^4.6.1",
    "raf": "^3.1.0",
    "rebound": "^0.0.13",
    "sister": "^3.0.0",
    "vendor-prefix": "^0.1.0"
  },
  "description": "A swipeable cards interface. The swipe-left/swipe-right for yes/no input. As seen in apps like Jelly and Tinder.",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-loader": "^5.3.2",
    "chai": "^3.2.0",
    "del": "^2.0.1",
    "gulp": "^3.9.0",
    "gulp-babel": "^5.2.1",
    "gulp-eslint": "^1.0.0",
    "gulp-mocha": "^2.1.3",
    "gulp-sourcemaps": "^1.5.2",
    "gulp-util": "^3.0.6",
    "jsdom": "^6.3.0",
    "jsonfile": "^2.2.1",
    "mocha": "^2.3.0",
    "pragmatist": "^3.0.21",
    "sinon": "^1.16.1",
    "webpack": "^1.12.1"
  },
  "directories": {},
  "dist": {
    "shasum": "6d421c54f66ac74eff8489ebd7ab693d43b14e98",
    "tarball": "https://registry.npmjs.org/swing/-/swing-3.0.3.tgz"
  },
  "gitHead": "d2cb9615b6ef0dc78dd080e7ab2978c968db748f",
  "homepage": "https://github.com/gajus/swing#readme",
  "keywords": [
    "swipe",
    "cards",
    "swipeable"
  ],
  "license": "BSD-3-Clause",
  "main": "./dist/index.js",
  "maintainers": [
    {
      "name": "gajus",
      "email": "gk@anuary.com"
    }
  ],
  "name": "swing",
  "optionalDependencies": {},
  "readme": "# Swing\n\n[![Travis build status](http://img.shields.io/travis/gajus/swing/master.svg?style=flat-square)](https://travis-ci.org/gajus/swing)\n[![NPM version](http://img.shields.io/npm/v/swing.svg?style=flat-square)](https://www.npmjs.org/package/swing)\n\nA swipeable cards interface. The swipe-left/swipe-right for yes/no input. As seen in apps like [Jelly](http://jelly.co/) and [Tinder](http://www.gotinder.com/), and [many others](http://www.saydaily.com/2014/09/tinder-swipe-and-media).\n\nGive it a [swing](http://gajus.com/sandbox/swing/examples/card-stack/)! and please [tweet it](https://twitter.com/intent/retweet?tweet_id=527505589732405248) if you like it. : )\n\n![Card stack example.](./.README/card-stack.gif)\n\n## Contents\n\n* [Usage Examples](#usage-examples)\n    * [Use Case](#use-case)\n        * [Single-Handed Navigation](#single-handed-navigation)\n        * [Digestible Unit of Information](#digestible-unit-of-information)\n        * [Data](#data)\n* [Quick Start](#quick-start)\n* [Configuration](#configuration)\n* [Methods](#methods)\n    * [Throwing Card Out of the Stack](#throwing-card-out-of-the-stack)\n* [Events](#events)\n    * [Event Object](#event-object)\n* [Download](#download)\n    * [Browser Bundle](#browser-bundle)\n* [Dependencies](#dependencies)\n\n## Usage Examples\n\n* [Card stack](http://gajus.com/sandbox/swing/examples/card-stack/).\n* [Card stack](http://gajus.com/sandbox/angular-swing/examples/card-stack/) using [angular-swing](https://github.com/gajus/angular-swing/) module.\n* [Programmatically control](http://gajus.com/sandbox/swing/examples/card-state/) the state of the card.\n* [Indicate the state of the drop](http://gajus.com/sandbox/swing/examples/throw-confidence/) using `throwConfidence` and `direction` [event object](#event-object) properties.\n\nThe code for all of the examples is in the [./examples/](https://github.com/gajus/swing/tree/master/examples/) folder.\n\n[Raise an issue](https://github.com/gajus/swing/issues) if you are missing an example.\n\n## Use Case\n\nA collection of observations about the extended use case of the swipeable cards interface, that I found useful when considering the implementation.\n\n### Single-Handed Navigation\n\n> Mobile devices are frequently used on-the-go, which drastically increases the probability that you'll attempt to navigate apps using just one hand, with the key digit being the mighty thumb.\n> Instead of browsing endless lists for the hidden perfect piece of data — be it the right music for the moment, what to do tonight, or your next potential hookup — card-swiping turns decision making into a highly engaging Choose-Your-Own-Adventure game.\n\n– https://medium.com/@janel_az/small-data-why-tinder-like-apps-are-the-way-of-the-future-1a4d5703b4b\n\n### Digestible Unit of Information\n\n> [..] the \"card\" on a mobile device becomes more and more important as a digestible unit of information on a small screen for users who are on the go and mostly glancing through their apps before settling into the ones that truly engage them.\n\n– http://techcrunch.com/2013/09/22/mobile-apps-card-interfaces-and-our-opposable-thumbs/\n\n### Data\n\n> More than a scroll and perhaps even more than discrete taps themselves, cards create repetitive, deliberate, discrete decision moments over and over. And as the user swipes, you can learn.\n> The time they swipe, the speed they swipe, what they swiped, the geolocation where they swiped, and even how similar the results of that swipe are vs. a swipe earlier that session are all possibilities that are yielding smarter apps for you and me every day.\n\n– http://www.itsmakeable.com/unconventional-wisdom/good-user-experience-design-ux-can-do-what-now/\n\n## Quick Start\n\n```html\n<ul>\n    <li></li>\n    <li></li>\n    <li></li>\n</ul>\n```\n\n```js\n// Prepare the cards in the stack for iteration.\nconst cards = [].slice.call(document.querySelectorAll('ul li'));\n\n// An instance of the Stack is used to attach event listeners.\nconst stack = Swing.Stack();\n\ncards.forEach((targetElement) => {\n    // Add card element to the Stack.\n    stack.createCard(targetElement);\n});\n\n// Add event listener for when a card is thrown out of the stack.\nstack.on('throwout', (event) => {\n    // e.target Reference to the element that has been thrown out of the stack.\n    // e.throwDirection Direction in which the element has been thrown (Card.DIRECTION_LEFT, Card.DIRECTION_RIGHT).\n\n    console.log('Card has been thrown out of the stack.');\n    console.log('Throw direction: ' + (event.throwDirection == Card.DIRECTION_LEFT ? 'left' : 'right'));\n});\n\n// Add event listener for when a card is thrown in the stack, including the spring back into place effect.\nstack.on('throwin', () => {\n    console.log('Card has snapped back to the stack.');\n});\n```\n\n## Configuration\n\n```js\nconst config = {\n    /**\n     * Invoked in the event of dragmove.\n     * Returns a value between 0 and 1 indicating the completeness of the throw out condition.\n     * Ration of the absolute distance from the original card position and element width.\n     *\n     * @param {Number} offset Distance from the dragStart.\n     * @param {HTMLElement} element Element.\n     * @return {Number}\n     */\n    throwOutConfidence: (offset, element) => {\n        return Math.min(Math.abs(offset) / element.offsetWidth, 1);\n    }\n};\n\nconst stack = stack = Swing.Stack(config);\n```\n\n| Name | Description | Default |\n| --- | --- | --- |\n| `isThrowOut` | Invoked in the event of `dragend`. Determines if element is being thrown out of the stack. | Element is considered to be thrown out when `throwOutConfidence` is equal to 1. |\n| `throwOutConfidence` | Invoked in the event of `dragmove`. Returns a value between 0 and 1 indicating the completeness of the throw out condition. | Ration of the absolute distance from the original card position and element width. |\n| `throwOutDistance` | Invoked when card is added to the stack. The card is thrown to this offset from the stack. | The value is a random number between `minThrowOutDistance` and `maxThrowOutDistance`. |\n| `minThrowOutDistance` | In effect when `throwOutDistance` is not overwritten. | 450. |\n| `maxThrowOutDistance` | In effect when `throwOutDistance` is not overwritten. | 500. |\n| `rotation` | Invoked in the event of `dragmove`. Determine the rotation of the element. | Rotation is equal to the proportion of horizontal and vertical offset times the `maximumRotation` constant. |\n| `maxRotation` | In effect when `rotation` is not overwritten. | 20. |\n| `transform` | Invoked in the event of `dragmove` and every time the physics solver is triggered. | Uses CSS transform to translate element position and rotation. |\n\nAll of the configuration parameters are optional. Refer to the source code of the [card](https://github.com/gajus/swing/blob/master/src/card.js) module to learn the parameters associated with every callback.\n\n## Methods\n\n```js\nconst stack = Swing.Stack();\nconst card = stack.createCard(HTMLElement);\n```\n\n| Name | Description |\n| --- | --- |\n| `stack.createCard(element)` | Creates an instance of Card and associates it with the element. |\n| `stack.getCard(element)` | Returns card associated with an element. |\n| `stack.on(event, listener)` | Attaches an [event listener](#events). |\n| `card.on(event, listener)` | Attaches an [event listener](#events). |\n| `card.throwIn(x, y)` | Throws a card into the stack from an arbitrary position. `x, y` is the position at the start of the throw. |\n| `card.throwOut(x, y)` | Throws a card out of the stack in the direction away from the original offset. `x, y` is the position at the start of the throw. |\n| `card.destroy()` | Unbinds all Hammer.Manager events. Removes the listeners from the physics simulation. |\n\n### Throwing Card Out of the Stack\n\nUse the `card.throwOut(x, y)` method to throw the card out of the stack. Offset the position to whatever direction you want to throw the card, e.g.\n\n```js\ncard.throwOut(Card.DIRECTION_LEFT, 0);\ncard.throwOut(Card.DIRECTION_RIGHT, 0);\n```\n\nTo make the animation more diverse, use random value for the `y` parameter.\n\n## Events\n\nEvent listener can be attached to an instance of `Swing.Stack` or `Swing.Card` using the `on` method:\n\n```js\nconst stack = Swing.Stack();\n\nconst card = stack.createCard(HTMLElement);\n\ncard.on('throwout', function () {});\nstack.on('throwout', function () {});\n```\n\n| Name | Description |\n| --- | --- |\n| `throwout` | When card has been thrown out of the stack. |\n| `throwoutend` | When card has been thrown out of the stack and the animation has ended. |\n| `throwoutleft` | Shorthand for `throwout` event in the `Card.DIRECTION_LEFT` direction. |\n| `throwoutright` | Shorthand for `throwout` event in the `Card.DIRECTION_RIGHT` direction. |\n| `throwin` | When card has been thrown into the stack. |\n| `throwinend` | When card has been thrown into the stack and the animation has ended. |\n| `dragstart` | Hammer [panstart](http://hammerjs.github.io/recognizer-pan/). |\n| `dragmove` | Hammer [panmove](http://hammerjs.github.io/recognizer-pan/). |\n| `dragend` | Hammer [panend](http://hammerjs.github.io/recognizer-pan/). |\n\n### Event Object\n\nEvent listener is invoked with a single `eventObject` parameter:\n\n```js\nconst stack = Swing.Stack();\n\nstack.on('throwout', function (eventObject) {});\n```\n\n| Name | Value |\n| --- | --- |\n| `target` | The element being dragged. |\n| `direction` | The direction in which the element is being dragged: `Card.DIRECTION_LEFT` or `Card.DIRECTION_RIGHT`. |\n| `throwOutConfidence` | A value between 0 and 1 indicating the completeness of the throw out condition. |\n\n## Download\n\nUsing [NPM](https://www.npmjs.org/):\n\n```sh\nnpm install swing\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gajus/swing.git"
  },
  "scripts": {
    "build": "npm run pragmatist build",
    "lint": "npm run pragmatist lint",
    "pragmatist": "pragmatist --es5",
    "test": "npm run pragmatist test",
    "watch": "npm run pragmatist watch",
    "watch-build": "npm run pragmatist watch-build",
    "watch-lint": "npm run pragmatist watch-lint",
    "watch-test": "npm run pragmatist watch-test"
  },
  "version": "3.0.3"
}
