{
  "_args": [
    [
      {
        "raw": "zone.js@0.6.26",
        "scope": null,
        "escapedName": "zone.js",
        "name": "zone.js",
        "rawSpec": "0.6.26",
        "spec": "0.6.26",
        "type": "version"
      },
      "/Users/Matthew/Textile"
    ]
  ],
  "_from": "zone.js@0.6.26",
  "_id": "zone.js@0.6.26",
  "_inCache": true,
  "_location": "/zone.js",
  "_nodeVersion": "6.8.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/zone.js-0.6.26.tgz_1476823791628_0.07981128408573568"
  },
  "_npmUser": {
    "name": "angularcore",
    "email": "angular-core+npm@google.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "zone.js@0.6.26",
    "scope": null,
    "escapedName": "zone.js",
    "name": "zone.js",
    "rawSpec": "0.6.26",
    "spec": "0.6.26",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/zone.js/-/zone.js-0.6.26.tgz",
  "_shasum": "067c13b8b80223a89b62e9dc82680f09762c4636",
  "_shrinkwrap": null,
  "_spec": "zone.js@0.6.26",
  "_where": "/Users/Matthew/Textile",
  "author": {
    "name": "Brian Ford"
  },
  "browser": "dist/zone.js",
  "bugs": {
    "url": "https://github.com/angular/zone.js/issues"
  },
  "dependencies": {},
  "description": "Zones for JavaScript",
  "devDependencies": {
    "@types/jasmine": "^2.2.33",
    "@types/node": "^6.0.38",
    "@types/systemjs": "^0.19.30",
    "concurrently": "^2.2.0",
    "es6-promise": "^3.0.2",
    "gulp": "^3.8.11",
    "gulp-clang-format": "^1.0.23",
    "gulp-rename": "^1.2.2",
    "gulp-rollup": "^2.3.0",
    "gulp-tsc": "^1.1.4",
    "gulp-tslint": "^6.1.2",
    "gulp-uglify": "^1.2.0",
    "gulp-util": "^3.0.7",
    "jasmine": "^2.4.1",
    "jasmine-core": "^2.2.0",
    "karma": "^0.13.14",
    "karma-chrome-launcher": "^0.2.1",
    "karma-firefox-launcher": "^0.1.4",
    "karma-jasmine": "^0.3.6",
    "karma-safari-launcher": "^0.1.1",
    "karma-sauce-launcher": "^0.2.10",
    "karma-sourcemap-loader": "^0.3.6",
    "nodejs-websocket": "^1.2.0",
    "pump": "^1.0.1",
    "systemjs": "^0.19.37",
    "ts-loader": "^0.6.0",
    "tslint": "^3.15.1",
    "typescript": "^2.0.2",
    "whatwg-fetch": "^1.0.0"
  },
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "dist": {
    "shasum": "067c13b8b80223a89b62e9dc82680f09762c4636",
    "tarball": "https://registry.npmjs.org/zone.js/-/zone.js-0.6.26.tgz"
  },
  "files": [
    "lib",
    "dist"
  ],
  "gitHead": "21935e8edf65a4192268ebd1940575ceaa08c244",
  "homepage": "https://github.com/angular/zone.js#readme",
  "license": "MIT",
  "main": "dist/zone-node.js",
  "maintainers": [
    {
      "name": "angularcore",
      "email": "angular-core+npm@google.com"
    },
    {
      "name": "btford",
      "email": "briantford@gmail.com"
    }
  ],
  "name": "zone.js",
  "optionalDependencies": {},
  "readme": "# Zone.js\n\n[![Build Status](https://travis-ci.org/angular/zone.js.png)](https://travis-ci.org/angular/zone.js)\n\nImplements _Zones_ for JavaScript, inspired by [Dart](https://www.dartlang.org/articles/zones/).\n\n> If you're using zone.js via unpkg please provide a query param `?main=browser`  \n`https://unpkg.com/zone.js?main=browser`\n\n# NEW Zone.js POST-v0.6.0\n\nSee the new API [here](./dist/zone.js.d.ts).\n\n# DEPRECATED Zone.js PRE-v0.5.15\n\n## What's a Zone?\n\nA Zone is an execution context that persists across async tasks.\nYou can think of it as [thread-local storage](http://en.wikipedia.org/wiki/Thread-local_storage) for JavaScript VMs.\n\nSee this video from ng-conf 2014 for a detailed explanation:\n\n[![screenshot of the zone.js presentation and ng-conf 2014](/presentation.png)](//www.youtube.com/watch?v=3IqtmUscE_U)\n\n### Running Within a Zone\n\nYou can run code within a zone with `zone.run`.\nTasks scheduled (with `setTimeout`, `setInterval`, or event listeners) stay within that zone.\n\n```javascript\nZone.current.fork({}).run(function () {\n    Zone.current.inTheZone = true;\n\n    setTimeout(function () {\n        console.log('in the zone: ' + !!Zone.current.inTheZone);\n    }, 0);\n});\n\nconsole.log('in the zone: ' + !!Zone.current.inTheZone);\n```\n\nThe above will log:\n\n```\n'in the zone: false'\n'in the zone: true'\n```\n\nNote that the function delayed by `setTimeout` stays inside the zone.\n\n### Forking a Zone\n\nZones have a set of hooks that allow you to change the behavior of code running within that zone.\nTo change a zone, you _fork_ it to get a new one.\n\n```javascript\nzone.fork({\n  beforeTask: function () {\n    console.log('hi');\n  }\n}).run(function () {\n  // do stuff\n});\n```\n\nHooks that you don't override when forking a zone are inherited from the existing one.\n\nSee the [API docs](#api) below for more.\n\n\n## Usage\n\nTo start using Zones, you need to include the `zone.js` script in this package onto\nyour page. This script should appear in the `<head>` of your HTML file before any other\nscripts, including shims/polyfills.\n\n\n## Examples\n\nThere are two kinds of examples:\n\n  1. The kind you have to run\n  2. Illustrative code snippets in this README\n\n### Running the ones that you have to run\n\nFor fully working examples:\n\n  1. Spawn a webserver in the root of the directory in which this repo lives.\n  (I like to use `python -m SimpleHTTPServer 3000`).\n  2. Open `http://localhost:3000/example` in your browser\n\nBelow are the aforementioned snippets.\n\n### Overriding A Zone's Hook\n\n```javascript\nvar someZone = zone.fork({\n  afterTask: function () {\n    console.log('goodbye');\n  }\n});\n\nsomeZone.fork({\n  afterTask: function () {\n    console.log('cya l8r');\n  }\n}).run(function () {\n  // do stuff\n});\n\n// logs: cya l8r\n```\n\n### Augmenting A Zone's Hook\n\nWhen you fork a zone, you'll often want to control how the parent zone's\nhook gets called.\n\nPrefixing a hook with `$` means that the hook will be passed the\nparent zone's hook, and the hook will be expected to return the function to\nbe invoked rather than be the function itself.\n\n```javascript\nvar someZone = zone.fork({\n  afterTask: function () {\n    console.log('goodbye');\n  }\n});\n\nsomeZone.fork({\n  $afterTask: function (parentOnLeave) {\n    // return the hook\n    return function afterTask() {\n      parentOnLeave();\n      console.log('cya l8r');\n    };\n  }\n}).run(function () {\n  // do stuff\n});\n\n// logs: goodbye\n//       cya l8r\n```\n\n#### `+` and `-` Sugar\nMost of the time, you'll want to run a hook before or after the parent's implementation.\nYou can prefix a hook with `-` for running before, and `+` for running after.\n\nThe above can be written like this:\n\n```javascript\nvar someZone = zone.fork({\n  afterTask: function () {\n    console.log('goodbye');\n  }\n});\n\nsomeZone.fork({\n  '+afterTask': function () {\n    console.log('cya l8r');\n  }\n}).run(function () {\n  // do stuff\n});\n\n// logs: goodbye\n//       cya l8r\n```\n\nThis frees you from writing boilerplate to compose a new hook.\n\n## API\n\nZone.js exports a single object: `window.zone`.\n\n### `zone.run`\n\nRuns a given function within the zone.\nExplained above.\n\n### `zone.bind`\n\nTransforms a function to run within the given zone.\n\n### `zone.fork`\n\n```javascript\nvar myZone = zone.fork({\n  onZoneCreated: function () {},\n  beforeTask: function () {},\n  afterTask: function () {},\n  onError: function () {},\n  enqueueTask: function() {},\n  dequeueTask: function() {},\n  setTimeout: function () {},\n  setInterval: function () {},\n  alert: function () {},\n  prompt: function () {},\n});\nmyZone.run(function () {\n  // woo!\n});\n```\n\nBelow describes the behavior of each of these hooks.\n\n### `zone.onZoneCreated`\n\nRuns when a zone is forked.\n\n### `zone.beforeTask`\n\nBefore a function invoked with `zone.run`, this hook runs.\nIf `zone.beforeTask` throws, the function  passed to `run` will not be invoked.\n\n### `zone.afterTask`\n\nAfter a function in a zone runs, the `afterTask` hook runs.\nThis hook will run even if the function passed to `run` throws.\n\n### `zone.onError`\n\nThis hook is called when the function passed to `run` or the `beforeTask` hook throws.\n\n### `zone.enqueueTask`\n\nThis hook is called when a function is registered with the VM.\nFor instance `setTimeout` and `addEventListener`.\n\n### `zone.dequeueTask`\n\nThis hook is called when a function is unregistered with the VM.\nFor instance `clearTimeout` and `removeEventListener`.\n\n### `zone.setTimeout`, `zone.setInterval`, `zone.alert`, `zone.prompt`\n\nThese hooks allow you to change the behavior of `window.setTimeout`, `window.setInterval`, etc.\nWhile in this zone, calls to `window.setTimeout` will redirect to `zone.setTimeout`.\n\n### `zone.requestAnimationFrame`, `zone.webkitRequestAnimationFrame`, `zone.mozRequestAnimationFrame`\n\nThese hooks allow you to change the behavior of `window.requestAnimationFrame()`, \n`window.webkitRequestAnimationFrame`, and `window.mozRequestAnimationFrame`.\n\nBy default the wrapCallback is executed in the zone where those methods have been called to avoid \ngrowing the stack size on each recursive call.\n\n### `zone.addEventListener`\n\nThis hook allows you to intercept calls to `EventTarget#addEventListener`.\n\n````javascript\nvar clickListenerCount = 0;\n\nzone.fork(\n  $addEventListener: function(parentAddEventListener) {\n    return function (type, listener) {\n      if (type === 'click') clickListenerCount++;\n      return parentAddEventListener.apply(this, arguments);\n    };\n  }\n);\n\nzone.run(function() {\n  myElement.addEventListener('click', listener);\n  myOtherElement.addEventListener('click', listener);\n\n  console.log(clickListenerCount); // 2\n});\n````\n\n### `zone.removeEventListener`\n\nThis hook allows you to intercept calls to `EventTarget#removeEventListener`.\n\n````javascript\nvar clickListenerCount = 0;\n\nzone.fork(\n  $removeEventListener: function(parentRemoveEventListener) {\n    return function (type, listener) {\n      if (type === 'click') clickListenerCount--;\n      return parentRemoveEventListener.apply(this, arguments);\n    };\n  }\n);\n\nzone.run(function() {\n  myElement.addEventListener('click', listener);\n  myElement.removeEventListener('click', listener);\n\n  console.log(clickListenerCount); // 0\n});\n````\n\n\n## Status\n\n* `setTimeout`, `setInterval`, and `addEventListener` work in FF23, IE10, and Chrome.\n* stack trace rewrite is kinda ugly and may contain extraneous calls.\n* `elt.onevent` works in FF23, IE10, but not Chrome. There's [a fix in the works though](https://code.google.com/p/chromium/issues/detail?id=43394)!\n\n\n## See also\n* [async-listener](https://github.com/othiym23/async-listener) - a similar library for node\n* [Async stack traces in Chrome](http://www.html5rocks.com/en/tutorials/developertools/async-call-stack/)\n* [strongloop/zone](https://github.com/strongloop/zone)\n* [vizone](https://github.com/gilbox/vizone) - control flow visualizer that uses zone.js\n\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/angular/zone.js.git"
  },
  "scripts": {
    "prepublish": "tsc && gulp build",
    "serve": "python -m SimpleHTTPServer 8000",
    "test": "npm run tsc && concurrently \"npm run tsc:w\" \"npm run ws-server\" \"karma start karma.conf.js\"",
    "test-node": "gulp test/node",
    "tsc": "tsc",
    "tsc:w": "tsc -w",
    "ws-server": "node ./test/ws-server.js"
  },
  "typings": "dist/zone.js.d.ts",
  "version": "0.6.26"
}
