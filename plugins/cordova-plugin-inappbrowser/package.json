{
  "_args": [
    [
      {
        "raw": "cordova-plugin-inappbrowser@1.7.1",
        "scope": null,
        "escapedName": "cordova-plugin-inappbrowser",
        "name": "cordova-plugin-inappbrowser",
        "rawSpec": "1.7.1",
        "spec": "1.7.1",
        "type": "version"
      },
      "/Users/Matthew/Textile/node_modules"
    ]
  ],
  "_from": "cordova-plugin-inappbrowser@1.7.1",
  "_id": "cordova-plugin-inappbrowser@1.7.1",
  "_inCache": true,
  "_location": "/cordova-plugin-inappbrowser",
  "_nodeVersion": "6.10.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/cordova-plugin-inappbrowser-1.7.1.tgz_1493685643722_0.5291660884395242"
  },
  "_npmUser": {
    "name": "filmaj",
    "email": "maj.fil@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cordova-plugin-inappbrowser@1.7.1",
    "scope": null,
    "escapedName": "cordova-plugin-inappbrowser",
    "name": "cordova-plugin-inappbrowser",
    "rawSpec": "1.7.1",
    "spec": "1.7.1",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cordova-plugin-inappbrowser/-/cordova-plugin-inappbrowser-1.7.1.tgz",
  "_shasum": "435b43f591fe7bfa95ea98dbe0004841fe59ba51",
  "_shrinkwrap": null,
  "_spec": "cordova-plugin-inappbrowser@1.7.1",
  "_where": "/Users/Matthew/Textile/node_modules",
  "author": {
    "name": "Apache Software Foundation"
  },
  "bugs": {
    "url": "https://github.com/apache/cordova-plugin-inappbrowser/issues"
  },
  "cordova": {
    "id": "cordova-plugin-inappbrowser",
    "platforms": [
      "android",
      "amazon-fireos",
      "ubuntu",
      "ios",
      "osx",
      "wp7",
      "wp8",
      "windows8",
      "windows",
      "firefoxos"
    ]
  },
  "dependencies": {},
  "description": "Cordova InAppBrowser Plugin",
  "devDependencies": {
    "jshint": "^2.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "435b43f591fe7bfa95ea98dbe0004841fe59ba51",
    "tarball": "https://registry.npmjs.org/cordova-plugin-inappbrowser/-/cordova-plugin-inappbrowser-1.7.1.tgz"
  },
  "engines": {
    "cordovaDependencies": {
      "0.2.3": {
        "cordova": ">=3.1.0"
      },
      "2.0.0": {
        "cordova": ">100"
      }
    }
  },
  "homepage": "https://github.com/apache/cordova-plugin-inappbrowser#readme",
  "keywords": [
    "cordova",
    "in",
    "app",
    "browser",
    "inappbrowser",
    "ecosystem:cordova",
    "cordova-android",
    "cordova-amazon-fireos",
    "cordova-ubuntu",
    "cordova-ios",
    "cordova-osx",
    "cordova-wp7",
    "cordova-wp8",
    "cordova-windows8",
    "cordova-windows",
    "cordova-firefoxos"
  ],
  "license": "Apache-2.0",
  "maintainers": [
    {
      "name": "bowserj",
      "email": "bowserj@apache.org"
    },
    {
      "name": "csantanapr",
      "email": "csantana23@gmail.com"
    },
    {
      "name": "filmaj",
      "email": "maj.fil@gmail.com"
    },
    {
      "name": "kotikov.vladimir",
      "email": "kotikov.vladimir@gmail.com"
    },
    {
      "name": "purplecabbage",
      "email": "purplecabbage@gmail.com"
    },
    {
      "name": "sgrebnov",
      "email": "sergei.grebnov@gmail.com"
    },
    {
      "name": "shazron",
      "email": "shazron@gmail.com"
    },
    {
      "name": "stevegill",
      "email": "stevengill97@gmail.com"
    }
  ],
  "name": "cordova-plugin-inappbrowser",
  "optionalDependencies": {},
  "readme": "---\ntitle: Inappbrowser\ndescription: Open an in-app browser window.\n---\n<!--\n# license: Licensed to the Apache Software Foundation (ASF) under one\n#         or more contributor license agreements.  See the NOTICE file\n#         distributed with this work for additional information\n#         regarding copyright ownership.  The ASF licenses this file\n#         to you under the Apache License, Version 2.0 (the\n#         \"License\"); you may not use this file except in compliance\n#         with the License.  You may obtain a copy of the License at\n#\n#           http://www.apache.org/licenses/LICENSE-2.0\n#\n#         Unless required by applicable law or agreed to in writing,\n#         software distributed under the License is distributed on an\n#         \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#         KIND, either express or implied.  See the License for the\n#         specific language governing permissions and limitations\n#         under the License.\n-->\n\n|Android 4.4|Android 5.1|Android 6.0|iOS 9.3|iOS 10.0|Windows 10 Store|Travis CI|\n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|[![Build Status](http://cordova-ci.cloudapp.net:8080/buildStatus/icon?job=cordova-periodic-build/PLATFORM=android-4.4,PLUGIN=cordova-plugin-inappbrowser)](http://cordova-ci.cloudapp.net:8080/job/cordova-periodic-build/PLATFORM=android-4.4,PLUGIN=cordova-plugin-inappbrowser/)|[![Build Status](http://cordova-ci.cloudapp.net:8080/buildStatus/icon?job=cordova-periodic-build/PLATFORM=android-5.1,PLUGIN=cordova-plugin-inappbrowser)](http://cordova-ci.cloudapp.net:8080/job/cordova-periodic-build/PLATFORM=android-5.1,PLUGIN=cordova-plugin-inappbrowser/)|[![Build Status](http://cordova-ci.cloudapp.net:8080/buildStatus/icon?job=cordova-periodic-build/PLATFORM=android-6.0,PLUGIN=cordova-plugin-inappbrowser)](http://cordova-ci.cloudapp.net:8080/job/cordova-periodic-build/PLATFORM=android-6.0,PLUGIN=cordova-plugin-inappbrowser/)|[![Build Status](http://cordova-ci.cloudapp.net:8080/buildStatus/icon?job=cordova-periodic-build/PLATFORM=ios-9.3,PLUGIN=cordova-plugin-inappbrowser)](http://cordova-ci.cloudapp.net:8080/job/cordova-periodic-build/PLATFORM=ios-9.3,PLUGIN=cordova-plugin-inappbrowser/)|[![Build Status](http://cordova-ci.cloudapp.net:8080/buildStatus/icon?job=cordova-periodic-build/PLATFORM=ios-10.0,PLUGIN=cordova-plugin-inappbrowser)](http://cordova-ci.cloudapp.net:8080/job/cordova-periodic-build/PLATFORM=ios-10.0,PLUGIN=cordova-plugin-inappbrowser/)|[![Build Status](http://cordova-ci.cloudapp.net:8080/buildStatus/icon?job=cordova-periodic-build/PLATFORM=windows-10-store,PLUGIN=cordova-plugin-inappbrowser)](http://cordova-ci.cloudapp.net:8080/job/cordova-periodic-build/PLATFORM=windows-10-store,PLUGIN=cordova-plugin-inappbrowser/)|[![Build Status](https://travis-ci.org/apache/cordova-plugin-inappbrowser.svg?branch=master)](https://travis-ci.org/apache/cordova-plugin-inappbrowser)|\n\n# cordova-plugin-inappbrowser\n\nYou can show helpful articles, videos, and web resources inside of your app. Users can view web pages without leaving your app.\n\n> To get a few ideas, check out the [sample](#sample) at the bottom of this page or go straight to the [reference](#reference) content.\n\nThis plugin provides a web browser view that displays when calling `cordova.InAppBrowser.open()`.\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');\n\nThe `cordova.InAppBrowser.open()` function is defined to be a drop-in replacement\nfor the `window.open()` function.  Existing `window.open()` calls can use the\nInAppBrowser window, by replacing window.open:\n\n    window.open = cordova.InAppBrowser.open;\n\nThe InAppBrowser window behaves like a standard web browser,\nand can't access Cordova APIs. For this reason, the InAppBrowser is recommended\nif you need to load third-party (untrusted) content, instead of loading that\ninto the main Cordova webview. The InAppBrowser is not subject to the\nwhitelist, nor is opening links in the system browser.\n\nThe InAppBrowser provides by default its own GUI controls for the user (back,\nforward, done).\n\nFor backwards compatibility, this plugin also hooks `window.open`.\nHowever, the plugin-installed hook of `window.open` can have unintended side\neffects (especially if this plugin is included only as a dependency of another\nplugin).  The hook of `window.open` will be removed in a future major release.\nUntil the hook is removed from the plugin, apps can manually restore the default\nbehaviour:\n\n    delete window.open // Reverts the call back to it's prototype's default\n\nAlthough `window.open` is in the global scope, InAppBrowser is not available until after the `deviceready` event.\n\n    document.addEventListener(\"deviceready\", onDeviceReady, false);\n    function onDeviceReady() {\n        console.log(\"window.open works well\");\n    }\n\nReport issues with this plugin on the [Apache Cordova issue tracker](https://issues.apache.org/jira/issues/?jql=project%20%3D%20CB%20AND%20status%20in%20%28Open%2C%20%22In%20Progress%22%2C%20Reopened%29%20AND%20resolution%20%3D%20Unresolved%20AND%20component%20%3D%20%22Plugin%20InAppBrowser%22%20ORDER%20BY%20priority%20DESC%2C%20summary%20ASC%2C%20updatedDate%20DESC)\n\n\n## <a id=\"reference\">Reference</a>\n## Installation\n\n    cordova plugin add cordova-plugin-inappbrowser\n\nIf you want all page loads in your app to go through the InAppBrowser, you can\nsimply hook `window.open` during initialization.  For example:\n\n    document.addEventListener(\"deviceready\", onDeviceReady, false);\n    function onDeviceReady() {\n        window.open = cordova.InAppBrowser.open;\n    }\n\n## cordova.InAppBrowser.open\n\nOpens a URL in a new `InAppBrowser` instance, the current browser\ninstance, or the system browser.\n\n    var ref = cordova.InAppBrowser.open(url, target, options);\n\n- __ref__: Reference to the `InAppBrowser` window when the target is set to `'_blank'`. _(InAppBrowser)_\n\n- __url__: The URL to load _(String)_. Call `encodeURI()` on this if the URL contains Unicode characters.\n\n- __target__: The target in which to load the URL, an optional parameter that defaults to `_self`. _(String)_\n\n    - `_self`: Opens in the Cordova WebView if the URL is in the white list, otherwise it opens in the `InAppBrowser`.\n    - `_blank`: Opens in the `InAppBrowser`.\n    - `_system`: Opens in the system's web browser.\n\n- __options__: Options for the `InAppBrowser`. Optional, defaulting to: `location=yes`. _(String)_\n\n    The `options` string must not contain any blank space, and each feature's name/value pairs must be separated by a comma. Feature names are case insensitive. All platforms support the value below:\n\n    - __location__: Set to `yes` or `no` to turn the `InAppBrowser`'s location bar on or off.\n\n    Android only:\n\n    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.\n    - __clearcache__: set to `yes` to have the browser's cookie cache cleared before the new window is opened\n    - __clearsessioncache__: set to `yes` to have the session cookie cache cleared before the new window is opened\n    - __zoom__: set to `yes` to show Android browser's zoom controls, set to `no` to hide them.  Default value is `yes`.\n    - __hardwareback__: set to `yes` to use the hardware back button to navigate backwards through the `InAppBrowser`'s history. If there is no previous page, the `InAppBrowser` will close.  The default value is `yes`, so you must set it to `no` if you want the back button to simply close the InAppBrowser.\n    - __mediaPlaybackRequiresUserAction__: Set to `yes` to prevent HTML5 audio or video from autoplaying (defaults to `no`).\n    - __shouldPauseOnSuspend__: Set to `yes` to make InAppBrowser WebView to pause/resume with the app to stop background audio (this may be required to avoid Google Play issues like described in [CB-11013](https://issues.apache.org/jira/browse/CB-11013)).\n    - __useWideViewPort__: Sets whether the WebView should enable support for the \"viewport\" HTML meta tag or should use a wide viewport. When the value of the setting is `no`, the layout width is always set to the width of the WebView control in device-independent (CSS) pixels. When the value is `yes` and the page contains the viewport meta tag, the value of the width specified in the tag is used. If the page does not contain the tag or does not provide a width, then a wide viewport will be used. (defaults to `yes`).\n\n    iOS only:\n\n    - __closebuttoncaption__: set to a string to use as the __Done__ button's caption. Note that you need to localize this value yourself.\n    - __disallowoverscroll__: Set to `yes` or `no` (default is `no`). Turns on/off the UIWebViewBounce property.\n    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.\n    - __clearcache__: set to `yes` to have the browser's cookie cache cleared before the new window is opened\n    - __clearsessioncache__: set to `yes` to have the session cookie cache cleared before the new window is opened\n    - __toolbar__:  set to `yes` or `no` to turn the toolbar on or off for the InAppBrowser (defaults to `yes`)\n    - __enableViewportScale__:  Set to `yes` or `no` to prevent viewport scaling through a meta tag (defaults to `no`).\n    - __mediaPlaybackRequiresUserAction__: Set to `yes` to prevent HTML5 audio or video from autoplaying (defaults to `no`).\n    - __allowInlineMediaPlayback__: Set to `yes` or `no` to allow in-line HTML5 media playback, displaying within the browser window rather than a device-specific playback interface. The HTML's `video` element must also include the `webkit-playsinline` attribute (defaults to `no`)\n    - __keyboardDisplayRequiresUserAction__: Set to `yes` or `no` to open the keyboard when form elements receive focus via JavaScript's `focus()` call (defaults to `yes`).\n    - __suppressesIncrementalRendering__: Set to `yes` or `no` to wait until all new view content is received before being rendered (defaults to `no`).\n    - __presentationstyle__:  Set to `pagesheet`, `formsheet` or `fullscreen` to set the [presentation style](http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/instp/UIViewController/modalPresentationStyle) (defaults to `fullscreen`).\n    - __transitionstyle__: Set to `fliphorizontal`, `crossdissolve` or `coververtical` to set the [transition style](http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/instp/UIViewController/modalTransitionStyle) (defaults to `coververtical`).\n    - __toolbarposition__: Set to `top` or `bottom` (default is `bottom`). Causes the toolbar to be at the top or bottom of the window.\n\n    Windows only:\n\n    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.\n    - __fullscreen__: set to `yes` to create the browser control without a border around it. Please note that if __location=no__ is also specified, there will be no control presented to user to close IAB window.\n    - __hardwareback__: works the same way as on Android platform.\n\n### Supported Platforms\n\n- Amazon Fire OS\n- Android\n- BlackBerry 10\n- Firefox OS\n- iOS\n- OSX\n- Windows 8 and 8.1\n- Windows Phone 7 and 8\n- Browser\n\n### Example\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');\n    var ref2 = cordova.InAppBrowser.open(encodeURI('http://ja.m.wikipedia.org/wiki/ハングル'), '_blank', 'location=yes');\n\n### Firefox OS Quirks\n\nAs plugin doesn't enforce any design there is a need to add some CSS rules if\nopened with `target='_blank'`. The rules might look like these\n\n``` css\n.inAppBrowserWrap {\n  background-color: rgba(0,0,0,0.75);\n  color: rgba(235,235,235,1.0);\n}\n.inAppBrowserWrap menu {\n  overflow: auto;\n  list-style-type: none;\n  padding-left: 0;\n}\n.inAppBrowserWrap menu li {\n  font-size: 25px;\n  height: 25px;\n  float: left;\n  margin: 0 10px;\n  padding: 3px 10px;\n  text-decoration: none;\n  color: #ccc;\n  display: block;\n  background: rgba(30,30,30,0.50);\n}\n.inAppBrowserWrap menu li.disabled {\n\tcolor: #777;\n}\n```\n\n### OSX Quirks\n\nAt the moment the only supported target in OSX is `_system`.\n\n`_blank` and `_self` targets are not yet implemented and are ignored silently. Pull requests and patches to get these to work are greatly appreciated.\n\n### Windows Quirks\n\nWindows 8.0, 8.1 and Windows Phone 8.1 don't support remote urls to be opened in the Cordova WebView so remote urls are always showed in the system's web browser if opened with `target='_self'`.\n\nOn Windows 10 if the URL is NOT in the white list and is opened with `target='_self'` it will be showed in the system's web browser instead of InAppBrowser popup.\n\nSimilar to Firefox OS IAB window visual behaviour can be overridden via `inAppBrowserWrap`/`inAppBrowserWrapFullscreen` CSS classes\n\n### Browser Quirks\n\n- Plugin is implemented via iframe,\n\n- Navigation history (`back` and `forward` buttons in LocationBar) is not implemented.\n\n## InAppBrowser\n\nThe object returned from a call to `cordova.InAppBrowser.open` when the target is set to `'_blank'`.\n\n### Methods\n\n- addEventListener\n- removeEventListener\n- close\n- show\n- hide\n- executeScript\n- insertCSS\n\n## InAppBrowser.addEventListener\n\n> Adds a listener for an event from the `InAppBrowser`. (Only available when the target is set to `'_blank'`)\n\n    ref.addEventListener(eventname, callback);\n\n- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_\n\n- __eventname__: the event to listen for _(String)_\n\n  - __loadstart__: event fires when the `InAppBrowser` starts to load a URL.\n  - __loadstop__: event fires when the `InAppBrowser` finishes loading a URL.\n  - __loaderror__: event fires when the `InAppBrowser` encounters an error when loading a URL.\n  - __exit__: event fires when the `InAppBrowser` window is closed.\n\n- __callback__: the function that executes when the event fires. The function is passed an `InAppBrowserEvent` object as a parameter.\n\n## Example\n\n```javascript\n\nvar inAppBrowserRef;\n\nfunction showHelp(url) {\n\n    var target = \"_blank\";\n\n    var options = \"location=yes,hidden=yes\";\n\n    inAppBrowserRef = cordova.InAppBrowser.open(url, target, options);\n\n    inAppBrowserRef.addEventListener('loadstart', loadStartCallBack);\n\n    inAppBrowserRef.addEventListener('loadstop', loadStopCallBack);\n\n    inAppBrowserRef.addEventListener('loaderror', loadErrorCallBack);\n\n}\n\nfunction loadStartCallBack() {\n\n    $('#status-message').text(\"loading please wait ...\");\n\n}\n\nfunction loadStopCallBack() {\n\n    if (inAppBrowserRef != undefined) {\n\n        inAppBrowserRef.insertCSS({ code: \"body{font-size: 25px;\" });\n\n        $('#status-message').text(\"\");\n\n        inAppBrowserRef.show();\n    }\n\n}\n\nfunction loadErrorCallBack(params) {\n\n    $('#status-message').text(\"\");\n\n    var scriptErrorMesssage =\n       \"alert('Sorry we cannot open that page. Message from the server is : \"\n       + params.message + \"');\"\n\n    inAppBrowserRef.executeScript({ code: scriptErrorMesssage }, executeScriptCallBack);\n\n    inAppBrowserRef.close();\n\n    inAppBrowserRef = undefined;\n\n}\n\nfunction executeScriptCallBack(params) {\n\n    if (params[0] == null) {\n\n        $('#status-message').text(\n           \"Sorry we couldn't open that page. Message from the server is : '\"\n           + params.message + \"'\");\n    }\n\n}\n\n```\n\n### InAppBrowserEvent Properties\n\n- __type__: the eventname, either `loadstart`, `loadstop`, `loaderror`, or `exit`. _(String)_\n\n- __url__: the URL that was loaded. _(String)_\n\n- __code__: the error code, only in the case of `loaderror`. _(Number)_\n\n- __message__: the error message, only in the case of `loaderror`. _(String)_\n\n\n### Supported Platforms\n\n- Amazon Fire OS\n- Android\n- iOS\n- Windows 8 and 8.1\n- Windows Phone 7 and 8\n- Browser\n\n### Browser Quirks\n\n`loadstart` and `loaderror` events are not being fired.\n\n### Quick Example\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');\n    ref.addEventListener('loadstart', function(event) { alert(event.url); });\n\n## InAppBrowser.removeEventListener\n\n> Removes a listener for an event from the `InAppBrowser`. (Only available when the target is set to `'_blank'`)\n\n    ref.removeEventListener(eventname, callback);\n\n- __ref__: reference to the `InAppBrowser` window. _(InAppBrowser)_\n\n- __eventname__: the event to stop listening for. _(String)_\n\n  - __loadstart__: event fires when the `InAppBrowser` starts to load a URL.\n  - __loadstop__: event fires when the `InAppBrowser` finishes loading a URL.\n  - __loaderror__: event fires when the `InAppBrowser` encounters an error loading a URL.\n  - __exit__: event fires when the `InAppBrowser` window is closed.\n\n- __callback__: the function to execute when the event fires.\nThe function is passed an `InAppBrowserEvent` object.\n\n### Supported Platforms\n\n- Amazon Fire OS\n- Android\n- iOS\n- Windows 8 and 8.1\n- Windows Phone 7 and 8\n- Browser\n\n### Quick Example\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');\n    var myCallback = function(event) { alert(event.url); }\n    ref.addEventListener('loadstart', myCallback);\n    ref.removeEventListener('loadstart', myCallback);\n\n## InAppBrowser.close\n\n> Closes the `InAppBrowser` window.\n\n    ref.close();\n\n- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_\n\n### Supported Platforms\n\n- Amazon Fire OS\n- Android\n- Firefox OS\n- iOS\n- Windows 8 and 8.1\n- Windows Phone 7 and 8\n- Browser\n\n### Quick Example\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');\n    ref.close();\n\n## InAppBrowser.show\n\n> Displays an InAppBrowser window that was opened hidden. Calling this has no effect if the InAppBrowser was already visible.\n\n    ref.show();\n\n- __ref__: reference to the InAppBrowser window (`InAppBrowser`)\n\n### Supported Platforms\n\n- Amazon Fire OS\n- Android\n- iOS\n- Windows 8 and 8.1\n- Browser\n\n### Quick Example\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'hidden=yes');\n    // some time later...\n    ref.show();\n\n## InAppBrowser.hide\n\n> Hides the InAppBrowser window. Calling this has no effect if the InAppBrowser was already hidden.\n\n    ref.hide();\n\n- __ref__: reference to the InAppBrowser window (`InAppBrowser`)\n\n### Supported Platforms\n\n- Amazon Fire OS\n- Android\n- iOS\n- Windows 8 and 8.1\n\n### Quick Example\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank');\n    // some time later...\n    ref.hide();\n\n## InAppBrowser.executeScript\n\n> Injects JavaScript code into the `InAppBrowser` window. (Only available when the target is set to `'_blank'`)\n\n    ref.executeScript(details, callback);\n\n- __ref__: reference to the `InAppBrowser` window. _(InAppBrowser)_\n\n- __injectDetails__: details of the script to run, specifying either a `file` or `code` key. _(Object)_\n  - __file__: URL of the script to inject.\n  - __code__: Text of the script to inject.\n\n- __callback__: the function that executes after the JavaScript code is injected.\n    - If the injected script is of type `code`, the callback executes\n      with a single parameter, which is the return value of the\n      script, wrapped in an `Array`. For multi-line scripts, this is\n      the return value of the last statement, or the last expression\n      evaluated.\n\n### Supported Platforms\n\n- Amazon Fire OS\n- Android\n- iOS\n- Windows 8 and 8.1\n- Browser\n\n### Quick Example\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');\n    ref.addEventListener('loadstop', function() {\n        ref.executeScript({file: \"myscript.js\"});\n    });\n\n### Browser Quirks\n\n- only __code__ key is supported.\n\n### Windows Quirks\n\nDue to [MSDN docs](https://msdn.microsoft.com/en-us/library/windows.ui.xaml.controls.webview.invokescriptasync.aspx) the invoked script can return only string values, otherwise the parameter, passed to __callback__ will be `[null]`.\n\n## InAppBrowser.insertCSS\n\n> Injects CSS into the `InAppBrowser` window. (Only available when the target is set to `'_blank'`)\n\n    ref.insertCSS(details, callback);\n\n- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_\n\n- __injectDetails__: details of the script to run, specifying either a `file` or `code` key. _(Object)_\n  - __file__: URL of the stylesheet to inject.\n  - __code__: Text of the stylesheet to inject.\n\n- __callback__: the function that executes after the CSS is injected.\n\n### Supported Platforms\n\n- Amazon Fire OS\n- Android\n- iOS\n- Windows\n\n### Quick Example\n\n    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');\n    ref.addEventListener('loadstop', function() {\n        ref.insertCSS({file: \"mystyles.css\"});\n    });\n__\n\n## <a id=\"sample\"></a>Sample: Show help pages with an InAppBrowser\n\nYou can use this plugin to show helpful documentation pages within your app. Users can view online help documents and then close them without leaving the app.\n\nHere's a few snippets that show how you do this.\n\n* [Give users a way to ask for help](#give).\n* [Load a help page](#load).\n* [Let users know that you're getting their page ready](#let).\n* [Show the help page](#show).\n* [Handle page errors](#handle).\n\n### <a id=\"give\"></a>Give users a way to ask for help\n\nThere's lots of ways to do this in your app. A drop down list is a simple way to do that.\n\n```html\n\n<select id=\"help-select\">\n    <option value=\"default\">Need help?</option>\n    <option value=\"article\">Show me a helpful article</option>\n    <option value=\"video\">Show me a helpful video</option>\n    <option value=\"search\">Search for other topics</option>\n</select>\n\n```\n\nGather the users choice in the ``onDeviceReady`` function of the page and then send an appropriate URL to a helper function in some shared library file. Our helper function is named ``showHelp()`` and we'll write that function next.\n\n```javascript\n\n$('#help-select').on('change', function (e) {\n\n    var url;\n\n    switch (this.value) {\n\n        case \"article\":\n            url = \"https://cordova.apache.org/docs/en/latest/\"\n                        + \"reference/cordova-plugin-inappbrowser/index.html\";\n            break;\n\n        case \"video\":\n            url = \"https://youtu.be/F-GlVrTaeH0\";\n            break;\n\n        case \"search\":\n            url = \"https://www.google.com/#q=inAppBrowser+plugin\";\n            break;\n    }\n\n    showHelp(url);\n\n});\n\n```\n\n### <a id=\"load\"></a>Load a help page\n\nWe'll use the ``open`` function to load the help page. We're setting the ``hidden`` property to ``yes`` so that we can show the browser only after the page content has loaded. That way, users don't see a blank browser while they wait for content to appear. When the ``loadstop`` event is raised, we'll know when the content has loaded. We'll handle that event shortly.\n\n```javascript\n\nfunction showHelp(url) {\n\n    var target = \"_blank\";\n\n    var options = \"location=yes,hidden=yes\";\n\n    inAppBrowserRef = cordova.InAppBrowser.open(url, target, options);\n\n    inAppBrowserRef.addEventListener('loadstart', loadStartCallBack);\n\n    inAppBrowserRef.addEventListener('loadstop', loadStopCallBack);\n\n    inAppBrowserRef.addEventListener('loaderror', loadErrorCallBack);\n\n}\n\n```\n\n### <a id=\"let\"></a>Let users know that you're getting their page ready\n\nBecause the browser doesn't immediately appear, we can use the ``loadstart`` event to show a status message, progress bar, or other indicator. This assures users that content is on the way.\n\n```javascript\n\nfunction loadStartCallBack() {\n\n    $('#status-message').text(\"loading please wait ...\");\n\n}\n\n```\n\n### <a id=\"show\"></a>Show the help page\n\nWhen the ``loadstopcallback`` event is raised, we know that the content has loaded and we can make the browser visible. This sort of trick can create the impression of better performance. The truth is that whether you show the browser before content loads or not, the load times are exactly the same.\n\n```javascript\n\nfunction loadStopCallBack() {\n\n    if (inAppBrowserRef != undefined) {\n\n        inAppBrowserRef.insertCSS({ code: \"body{font-size: 25px;\" });\n\n        $('#status-message').text(\"\");\n\n        inAppBrowserRef.show();\n    }\n\n}\n\n```\nYou might have noticed the call to the ``insertCSS`` function. This serves no particular purpose in our scenario. But it gives you an idea of why you might use it. In this case, we're just making sure that the font size of your pages have a certain size. You can use this function to insert any CSS style elements. You can even point to a CSS file in your project.\n\n### <a id=\"handle\"></a>Handle page errors\n\nSometimes a page no longer exists, a script error occurs, or a user lacks permission to view the resource. How or if you handle that situation is completely up to you and your design. You can let the browser show that message or you can present it in another way.\n\nWe'll try to show that error in a message box. We can do that by injecting a script that calls the ``alert`` function. That said, this won't work in browsers on Windows devices so we'll have to look at the parameter of the ``executeScript`` callback function to see if our attempt worked. If it didn't work out for us, we'll just show the error message in a ``<div>`` on the page.\n\n```javascript\n\nfunction loadErrorCallBack(params) {\n\n    $('#status-message').text(\"\");\n\n    var scriptErrorMesssage =\n       \"alert('Sorry we cannot open that page. Message from the server is : \"\n       + params.message + \"');\"\n\n    inAppBrowserRef.executeScript({ code: scriptErrorMesssage }, executeScriptCallBack);\n\n    inAppBrowserRef.close();\n\n    inAppBrowserRef = undefined;\n\n}\n\nfunction executeScriptCallBack(params) {\n\n    if (params[0] == null) {\n\n        $('#status-message').text(\n           \"Sorry we couldn't open that page. Message from the server is : '\"\n           + params.message + \"'\");\n    }\n\n}\n\n```\n\n## More Usage Info\n\n### Local Urls ( source is in the app package )\n```\nvar iab = cordova.InAppBrowser;\n\niab.open('local-url.html');                  // loads in the Cordova WebView\niab.open('local-url.html', '_self');         // loads in the Cordova WebView\niab.open('local-url.html', '_system');       // Security error: system browser, but url will not load (iOS)\niab.open('local-url.html', '_blank');        // loads in the InAppBrowser\niab.open('local-url.html', 'random_string'); // loads in the InAppBrowser\niab.open('local-url.html', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar\n\n```\n\n\n\n### Whitelisted Content\n\n```\nvar iab = cordova.InAppBrowser;\n\niab.open('http://whitelisted-url.com');                  // loads in the Cordova WebView\niab.open('http://whitelisted-url.com', '_self');         // loads in the Cordova WebView\niab.open('http://whitelisted-url.com', '_system');       // loads in the system browser\niab.open('http://whitelisted-url.com', '_blank');        // loads in the InAppBrowser\niab.open('http://whitelisted-url.com', 'random_string'); // loads in the InAppBrowser\n\niab.open('http://whitelisted-url.com', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar\n\n```\n\n### Urls that are not white-listed\n\n```\nvar iab = cordova.InAppBrowser;\n\niab.open('http://url-that-fails-whitelist.com');                  // loads in the InAppBrowser\niab.open('http://url-that-fails-whitelist.com', '_self');         // loads in the InAppBrowser\niab.open('http://url-that-fails-whitelist.com', '_system');       // loads in the system browser\niab.open('http://url-that-fails-whitelist.com', '_blank');        // loads in the InAppBrowser\niab.open('http://url-that-fails-whitelist.com', 'random_string'); // loads in the InAppBrowser\niab.open('http://url-that-fails-whitelist.com', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar\n\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apache/cordova-plugin-inappbrowser.git"
  },
  "scripts": {
    "jshint": "node node_modules/jshint/bin/jshint www && node node_modules/jshint/bin/jshint src && node node_modules/jshint/bin/jshint tests",
    "test": "npm run jshint"
  },
  "types": "./types/index.d.ts",
  "version": "1.7.1"
}
